import{_ as i,M as l,p as o,q as r,R as n,t as e,N as a,a1 as t}from"./framework-ff09ffed.js";const d={},c=t(`<h1 id="获取请求主体" tabindex="-1"><a class="header-anchor" href="#获取请求主体" aria-hidden="true">#</a> 获取请求主体</h1><p>在 Nginx 的典型应用场景中，几乎都是只读取 HTTP 头即可，例如负载均衡、正反向代理等场景。</p><p>但是对于 API Server 或者 Web Application ，对 body 可以说就比较敏感了。</p><p>由于 OpenResty 基于 Nginx ，所以天然的对请求 body 的读取细节与其他成熟 Web 框架有些不同。</p><h3 id="最简单的-hello-xxx" tabindex="-1"><a class="header-anchor" href="#最简单的-hello-xxx" aria-hidden="true">#</a> 最简单的 “Hello xxx”</h3><p>先来构造最简单的一个请求，POST 名字给服务端，服务端应答一个 <code>Hello xxx</code>。</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>
    <span class="token comment"># ...</span>
    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">listen</span>    <span class="token number">80</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server_name</span> 127.0.0.1</span><span class="token punctuation">;</span>

        <span class="token directive"><span class="token keyword">location</span> = /req.body</span> <span class="token punctuation">{</span>
            <span class="token directive"><span class="token keyword">content_by_lua_block</span></span> <span class="token punctuation">{</span>
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                ngx.say(&quot;Hello &quot;..data)
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),p={href:"https://github.com/openresty/lua-nginx-module#ngxreqget_body_data",target:"_blank",rel:"noopener noreferrer"},u=n("code",null,"ngx.req.get_body_data()",-1),b=n("code",null,"nil",-1),v={href:"https://github.com/openresty/lua-nginx-module#ngxreqread_body",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"ngx.req.read_body",-1),h=t(`<p>测试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> http://127.0.0.1/req.body <span class="token parameter variable">-d</span> Curder
<span class="token comment">#</span>
<span class="token comment"># Hello Curder</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 Nginx 是为了解决负载均衡场景诞生的，所以它默认是不读取 body 的行为，会对 API Server 和 Web Application 场景造成一些影响。</p><p>根据需要正确读取、丢弃 body 对 OpenResty 开发是至关重要的。</p>`,4);function _(k,x){const s=l("ExternalLinkIcon");return o(),r("div",null,[c,n("blockquote",null,[n("p",null,[e("使用 "),n("a",p,[u,a(s)]),e(" 读请求体，会出现读取不到直接返回 "),b,e(" 的情况。")]),n("p",null,[e("如果请求体尚未被读取，务必先调用 "),n("a",v,[m,a(s)])])]),h])}const y=i(d,[["render",_],["__file","get-request-body.html.vue"]]);export{y as default};
