import{_ as t,M as l,p as o,q as c,R as n,t as e,N as i,a1 as a}from"./framework-fb0bc66b.js";const u={},d=n("h1",{id:"过滤资源",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#过滤资源","aria-hidden":"true"},"#"),e(" 过滤资源")],-1),r=n("p",null,'Nova 的过滤器可以让你定制你的 Nova 列表的查询条件. 例如, 你也许想定义一个过滤器, 用来快速找到 你应用中的"管理员"用户:',-1),k=["src"],v=a(`<h2 id="定义过滤器" tabindex="-1"><a class="header-anchor" href="#定义过滤器" aria-hidden="true">#</a> 定义过滤器</h2><h3 id="选择类型的过滤" tabindex="-1"><a class="header-anchor" href="#选择类型的过滤" aria-hidden="true">#</a> 选择类型的过滤</h3><p>大多数的 Nova 过滤器是选择类型，它允许用户从一个列表中选择一个过滤选项。</p><p>可以通过 <code>nova:filter</code> Artisan 命令来生成一个过滤器, 生成的过滤器默认放在 <code>app/Nova/Filters</code> 文件夹下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan nova:filter UserType
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>每个在 Nova 中生成的过滤器都包含了 2 个方法 : <code>apply</code> 和 <code>options</code>. <code>apply</code> 方法负责按希望的状态修改查询条件, 而 <code>options</code> 方法用来定义过滤器中定义的过滤选项。例如 <code>UserType</code> 过滤器内容如下</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Nova<span class="token punctuation">\\</span>Filters</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Nova<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>Filter</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">UserType</span> <span class="token keyword">extends</span> <span class="token class-name">Filter</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 声明这个过滤器的查询条件
     *
     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span>  <span class="token parameter">$request</span>
     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Builder</span>  <span class="token parameter">$query</span>
     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token keyword">mixed</span></span>  <span class="token parameter">$value</span>
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Builder</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">apply</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;type&#39;</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取过滤器的可选性
     *
     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span>  <span class="token parameter">$request</span>
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">array</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">options</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;管理员&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;admin&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;编辑&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;editor&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>options</code> 方法返回一个键值对数组，数组的键是展示给使用者选择的文本。数组的值则会在选择后作为 <code>$value</code> 参数传入 <code>apply</code> 方法在示例中, 我们的过滤器定义了 2 个选项 : <code>admin</code> 和 <code>editor</code>。</p><p>如示例所见, 可以利用这个方式传入其他预期的值到 <code>apply</code> 方法中以完成按条件过滤列表数据, <code>apply</code> 方法应该始终返回一个查询实例。</p><h3 id="布尔类型的过滤器" tabindex="-1"><a class="header-anchor" href="#布尔类型的过滤器" aria-hidden="true">#</a> 布尔类型的过滤器</h3><p>Nova 同时页支持布尔类型的过滤器，它允许用户在一个列表中多选过滤条件。</p>`,11),m=["src"],b=a(`<p>可以通过命令行<code>nova:filter --boolean</code>的命令来生成一个布尔类型的过滤器， 生成的过滤器默认放在 <code>app/Nova/Filters</code> 文件夹下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan nova:filter UserType <span class="token parameter variable">--boolean</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>生成的每个布尔类型的过滤器包含两个方法：<code>apply</code>和<code>options</code>；其中<code>apply</code>方法负责修改查询以实现所需的过滤器状态，而 options 方法定义了过滤器可能具有的“值”。</p><p>构建布尔过滤器时，传递给 <code>apply</code> 方法的 <code>$value</code> 参数是一个关联数组，其中包含每个过滤器选项的布尔值。</p><p>看下下面的布尔类型的过滤器</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Nova<span class="token punctuation">\\</span>Filters</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Nova<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>BooleanFilter</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">UserType</span> <span class="token keyword">extends</span> <span class="token class-name">BooleanFilter</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Apply the filter to the given query.
     *
     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span>  <span class="token parameter">$request</span>
     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Builder</span>  <span class="token parameter">$query</span>
     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token keyword">mixed</span></span>  <span class="token parameter">$value</span>
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Builder</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">apply</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// dump($value);</span>
        <span class="token comment">// [&#39;admin&#39; =&gt; true/false, &#39;editor&#39; =&gt; true/false]</span>

        <span class="token keyword">return</span> <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;is_admin&#39;</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;admin&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                     <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;is_editor&#39;</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;editor&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Get the filter&#39;s available options.
     *
     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span>  <span class="token parameter">$request</span>
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">array</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">options</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;Administrator&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;admin&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;Editor&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;editor&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>options</code> 方法返回一个键值对数组，数组的键是展示给使用者选择的文本。数组的值则会在选择后作为 <code>$value</code> 参数传入 <code>apply</code> 方法。在示例中，过滤器定义了 2 个选项 : <code>admin</code> 和 <code>editor</code>。</p><p>正如在上面的示例中所看到的，可以利用传入的 <code>$value</code> 来修改查询。 <code>apply</code> 方法应该返回修改后的查询实例。</p><h3 id="日期过滤器" tabindex="-1"><a class="header-anchor" href="#日期过滤器" aria-hidden="true">#</a> 日期过滤器</h3><p>Nova 同时也支持<code>date</code>过滤器，允许用户通过时间选择器来进行过滤。</p>`,10),g=["src"],h=a(`<p>可以通过命令行<code>nova:filter --date</code>的命令来生成一个时间类型的过滤器， 生成的过滤器默认放在 <code>app/Nova/Filters</code> 文件夹下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan nova:filter UserType <span class="token parameter variable">--date</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Nova 生成的每个日期过滤器包含一个方法：<code>apply</code>。 apply 方法负责修改查询以实现所需的过滤器状态。</p><p>构建日期过滤器时，传递给 <code>apply</code> 方法的 <code>$value</code> 参数是所选日期的字符串表示形式。</p><p>看一个示例 <code>BirthdayFilter</code> 过滤器：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Nova<span class="token punctuation">\\</span>Filters</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Carbon</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Nova<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>DateFilter</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">BirthdayFilter</span> <span class="token keyword">extends</span> <span class="token class-name">DateFilter</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Apply the filter to the given query.
     *
     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span>  <span class="token parameter">$request</span>
     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Builder</span>  <span class="token parameter">$query</span>
     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token keyword">mixed</span></span>  <span class="token parameter">$value</span>
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Builder</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">apply</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;birthday&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&lt;=&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">Carbon</span><span class="token operator">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如在上面示例中所看到的，可以利用传入的<code>$value</code> 来修改查询。 <code>apply</code> 方法应该返回修改后的查询实例。</p><h2 id="注册过滤器" tabindex="-1"><a class="header-anchor" href="#注册过滤器" aria-hidden="true">#</a> 注册过滤器</h2><p>一旦定义了过滤器，即可将其附加到资源中。Nova 生成的每个资源都包含一个 filters 方法。要将过滤器附加到资源，只需将其添加到此方法返回的过滤器数组中</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token doc-comment comment">/**
 * 获取可用于资源的过滤器。
 *
 * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span>  <span class="token parameter">$request</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">array</span></span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">filters</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Filters<span class="token punctuation">\\</span>UserType</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考地址" tabindex="-1"><a class="header-anchor" href="#参考地址" aria-hidden="true">#</a> 参考地址</h2>`,11),y={href:"https://nova.laravel.com/docs/2.0/filters/defining-filters.html#defining-filters",target:"_blank",rel:"noopener noreferrer"};function f(s,w){const p=l("ExternalLinkIcon");return o(),c("div",null,[d,r,n("img",{src:s.$withBase("/images/languages/laravel/nova/how-to-use-filters-in-laravel-nova/laravel-nova-defining-select-filters.png"),alt:""},null,8,k),v,n("img",{src:s.$withBase("/images/languages/laravel/nova/how-to-use-filters-in-laravel-nova/laravel-nova-defining-boolean-filters.png"),alt:""},null,8,m),b,n("img",{src:s.$withBase("/images/languages/laravel/nova/how-to-use-filters-in-laravel-nova/laravel-nova-defining-date-filters.png"),alt:""},null,8,g),h,n("ul",null,[n("li",null,[n("a",y,[e("Laravel Nova Defining Filters"),i(p)])])])])}const $=t(u,[["render",f],["__file","08-how-to-use-filters-in-laravel-nova.html.vue"]]);export{$ as default};
