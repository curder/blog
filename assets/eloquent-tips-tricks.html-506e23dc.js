import{_ as p,M as o,p as c,q as l,R as n,t as s,N as e,a1 as t}from"./framework-fb0bc66b.js";const i={},u=n("h1",{id:"eloquent-模型技巧",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#eloquent-模型技巧","aria-hidden":"true"},"#"),s(" Eloquent 模型技巧")],-1),r={href:"https://laravel-news.com/eloquent-tips-tricks",target:"_blank",rel:"noopener noreferrer"},d=t(`<p>Laravel Eloquent 的ORM看起来像一个简单的机制。</p><p>但是有很多半隐藏的功能和不太知名的方式来实现更多。在这篇文章中，我们来回顾一下这些技巧。</p><h2 id="增量和减量" tabindex="-1"><a class="header-anchor" href="#增量和减量" aria-hidden="true">#</a> 增量和减量</h2><ul><li>您之前可能这样写</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$article</span> <span class="token operator">=</span> <span class="token class-name static-context">Article</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$article_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$article</span><span class="token operator">-&gt;</span><span class="token property">read_count</span><span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token variable">$article</span><span class="token operator">-&gt;</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>更优雅的示范</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$article</span> <span class="token operator">=</span> <span class="token class-name static-context">Article</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$article_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$article</span><span class="token operator">-&gt;</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;read_count&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>下面这些也可以使用</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Article</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$article_id</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;read_count&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// +1</span>
<span class="token class-name static-context">Article</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$article_id</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;read_count&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// +10</span>
<span class="token class-name static-context">Product</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$produce_id</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;stock&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="x或者y方法" tabindex="-1"><a class="header-anchor" href="#x或者y方法" aria-hidden="true">#</a> X或者Y方法</h2><p>Laravel Eloquent 有相当多的功能结合了两种方法，比如&quot;请做x，否则做y&quot;。</p><h3 id="findorfail-方法" tabindex="-1"><a class="header-anchor" href="#findorfail-方法" aria-hidden="true">#</a> <code>findOrFail()</code> 方法</h3><ul><li>您之前可能这样写</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">abort</span> <span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>更优雅的示范</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">findOrFail</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="firstorcreate-方法" tabindex="-1"><a class="header-anchor" href="#firstorcreate-方法" aria-hidden="true">#</a> <code>firstOrCreate()</code>方法</h3><ul><li>您之前可能这样写</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token variable">$email</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;email&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$email</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>更优雅的做法</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">firstOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;email&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$email</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="模型-boot-方法" tabindex="-1"><a class="header-anchor" href="#模型-boot-方法" aria-hidden="true">#</a> 模型 <code>boot()</code> 方法</h2><p>在Laravel Eloquent的模型中有一个叫做<code>boot()</code>的静态方法，您可以通过在模型中重写来覆盖默认行为。</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword static-context">static</span><span class="token operator">::</span><span class="token function">updating</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$model</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// do some logging</span>
            <span class="token comment">// override some property like $model-&gt;something = transform($something);</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可能最常见的例子之一就是在创建模型对象时设置一些字段值。</p>`,25),k={href:"https://github.com/webpatser/laravel-uuid",target:"_blank",rel:"noopener noreferrer"},v=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token function">creating</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$model</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$model</span><span class="token operator">-&gt;</span><span class="token property">uuid</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token class-name static-context">Uuid</span><span class="token operator">::</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关联关系中的条件和排序" tabindex="-1"><a class="header-anchor" href="#关联关系中的条件和排序" aria-hidden="true">#</a> 关联关系中的条件和排序</h2><p>您可以在模型中这样定义关系的典型方式</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">users</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">hasMany</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;App\\User&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是您知道在这一点上我们已经可以添加位置或命令了吗？</p><p>例如，如果您想要某种类型的用户的特定关系，并可以通过电子邮件排序，则可以执行此操作</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">approvedUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">hasMany</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;App\\User&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;approved&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模型属性-时间戳-追加等。" tabindex="-1"><a class="header-anchor" href="#模型属性-时间戳-追加等。" aria-hidden="true">#</a> 模型属性：时间戳，追加等。</h2><p>有一个Laravel Eloquent Model 的几个参数，以类的属性的形式声明，最常用的可能是下面这些。</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$table</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;users&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 当前模型表名</span>
    <span class="token keyword">protected</span> <span class="token variable">$fillable</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;password&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 定义能够批量填充的字段，比如：使用User::create()来填充数据库数据</span>
    <span class="token keyword">protected</span> <span class="token variable">$dates</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;deleted_at&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 能被Carbon-ized时间转化的字段</span>
    <span class="token keyword">protected</span> <span class="token variable">$appends</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;field1&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;field2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 在JSON字符串中追加值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面还有更多</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">protected</span> <span class="token variable">$primaryKey</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;uuid&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 表主键，如果不是默认的id的话</span>
<span class="token keyword">public</span> <span class="token variable">$incrementing</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 如果不需要自增，将值设置为false</span>
<span class="token keyword">protected</span> <span class="token variable">$perPage</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span> <span class="token comment">// 分页页码数，默认是15</span>
<span class="token keyword">const</span> <span class="token constant">CREATED_AT</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 创建时间字段值，如果不是默认的created_at，需要修改这个常量值</span>

<span class="token keyword">const</span> <span class="token constant">UPDATED_AT</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;updated_at&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 更新时间字段值，如果不是默认的updated_at，需要修改这个常量值</span>
<span class="token keyword">public</span> <span class="token variable">$timestamps</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 如果不使用时间戳需要设置为false值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),g={href:"https://github.com/laravel/framework/blob/5.6/src/Illuminate/Database/Eloquent/Model.php",target:"_blank",rel:"noopener noreferrer"},m=t(`<h2 id="找到多个实体" tabindex="-1"><a class="header-anchor" href="#找到多个实体" aria-hidden="true">#</a> 找到多个实体</h2><p>我们都知道<code>find()</code>方法。</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是很少有人知道它可以接受多个ID作为数组：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="wherex" tabindex="-1"><a class="header-anchor" href="#wherex" aria-hidden="true">#</a> WhereX</h2><ul><li>您之前可能这样写</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;approved&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>更优雅的解决示例</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">whereApproved</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>您可以更改任何字段的名称，并将其作为后缀追加到“where”，它将按魔术方法帮您达成目标。</p><p>另外，还有一些预先定义好的与日期/时间相关的方法</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">whereDate</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Y-m-d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">whereDay</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">whereMonth</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;m&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">whereYear</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Y&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="按关联关系排序" tabindex="-1"><a class="header-anchor" href="#按关联关系排序" aria-hidden="true">#</a> 按关联关系排序</h2><p>一些更复杂的“技巧”，如果您有论坛话题，但想通过最新的帖子查看它们呢？</p><p>首先，描述关于该主题的最新帖子的单独关系</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">latestPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">hasOne</span><span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>App<span class="token punctuation">\\</span>Post</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">latest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，在您的控制器方法中您可以做到这一点“魔术”</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name static-context">Topic</span><span class="token operator">::</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;latestPost&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">sortByDesc</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;latestPost.created_at&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="使用eloquent-when-尽量不使用if-else-s" tabindex="-1"><a class="header-anchor" href="#使用eloquent-when-尽量不使用if-else-s" aria-hidden="true">#</a> 使用<code>Eloquent::when()</code>，尽量不使用if-else&#39;s</h2><p>您之前可能用<code>if-else</code>编写条件查询，如下所示：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filter_by&#39;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string single-quoted-string">&#39;likes&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;likes&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&gt;&#39;</span><span class="token punctuation">,</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;likes_amount&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filter_by&#39;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string single-quoted-string">&#39;date&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ordering_rule&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;desc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但有一个更好的方法 - 使用<code>when()</code>：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token class-name static-context">Author</span><span class="token operator">::</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filter_by&#39;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string single-quoted-string">&#39;likes&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$q</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$q</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;likes&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&gt;&#39;</span><span class="token punctuation">,</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;likes_amount&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filter_by&#39;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string single-quoted-string">&#39;date&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$q</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$q</span><span class="token operator">-&gt;</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ordering_rule&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;desc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过观察您可能会发现，使用<code>when()</code>方法可能不会感觉更短或更优雅，但是它的强大之处是传递参数</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;role&#39;</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$q</span><span class="token punctuation">,</span> <span class="token variable">$role</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">return</span> <span class="token variable">$q</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;role_id&#39;</span><span class="token punctuation">,</span> <span class="token variable">$role</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$authors</span> <span class="token operator">=</span> <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="belongsto默认模型" tabindex="-1"><a class="header-anchor" href="#belongsto默认模型" aria-hidden="true">#</a> <code>BelongsTo</code>默认模型</h2><p>假设您的帖子属于作者，然后是Blade代码</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token variable">$post</span><span class="token operator">-&gt;</span><span class="token property">author</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是如果作者被删除或者由于某种原因没有设置呢？您会得到一个错误，像<code>property of non-object</code>。</p><p>当然，您可以像这样防止它 <code>$post-&gt;author-&gt;name ?? &#39;&#39;</code></p><p>但您可以在Laravel Eloquent Model的关联关系层面上做到这一点：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">author</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">belongsTo</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;App\\Author&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">withDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，如果没有作者附加到该帖子，<code>author()</code>关系将返回一个空的<code>App\\Author</code>模型。</p><p>此外，我们可以将默认属性值分配给该默认模型。</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">author</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">belongsTo</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;App\\Author&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">withDefault</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Guest Author&#39;</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用变化属性排序" tabindex="-1"><a class="header-anchor" href="#使用变化属性排序" aria-hidden="true">#</a> 使用变化属性排序</h2><p>假如您有下面的模型方法</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">getFullNameAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">attributes</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;first_name&#39;</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39; &#39;</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">attributes</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;last_name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在您想通过<code>full_name</code>来排序，您可能会这么做</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$clients</span> <span class="token operator">=</span> <span class="token class-name static-context">Client</span><span class="token operator">::</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;full_name&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这样是不会生效的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解决方案非常简单。我们需要在获得结果后对结果进行排序。</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$clients</span> <span class="token operator">=</span> <span class="token class-name static-context">Client</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">sortBy</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;full_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 成功排序</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,43),b=n("code",null,"orderBy",-1),h=n("code",null,"sortBy",-1),f={href:"http://laraveldaily.com/eloquent-order-results-mutator-attribute/",target:"_blank",rel:"noopener noreferrer"},q=t(`<h2 id="全局范围内的默认排序" tabindex="-1"><a class="header-anchor" href="#全局范围内的默认排序" aria-hidden="true">#</a> 全局范围内的默认排序</h2><p>如果您想让<code>User::all()</code>总是按名称字段排序呢？您可以指定一个全局范围。</p><p>请回到上面已经提到的<code>boot()</code>方法。</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Order by name ASC</span>
    <span class="token keyword static-context">static</span><span class="token operator">::</span><span class="token function">addGlobalScope</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;order&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Builder</span> <span class="token variable">$builder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$builder</span><span class="token operator">-&gt;</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;asc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),y={href:"https://laravel-china.org/docs/laravel/5.6/eloquent#query-scopes",target:"_blank",rel:"noopener noreferrer"},w=t(`<h2 id="原始查询方法" tabindex="-1"><a class="header-anchor" href="#原始查询方法" aria-hidden="true">#</a> 原始查询方法</h2><p>有时我们需要将原始查询添加到我们的雄辩报表中。幸运的是，Laravel Eloquent Model 提供了这样的功能。</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// whereRaw</span>
<span class="token variable">$orders</span> <span class="token operator">=</span> <span class="token class-name static-context">DB</span><span class="token operator">::</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;orders&#39;</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">whereRaw</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;price &gt; IF(state = &quot;TX&quot;, ?, 100)&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// havingRaw</span>
<span class="token class-name static-context">Product</span><span class="token operator">::</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;category_id&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">havingRaw</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;COUNT(*) &gt; 1&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// orderByRaw</span>
<span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;2016-01-01&#39;</span><span class="token punctuation">)</span>
  <span class="token operator">-&gt;</span><span class="token function">orderByRaw</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;(updated_at - created_at) desc&#39;</span><span class="token punctuation">)</span>
  <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="复制数据库行" tabindex="-1"><a class="header-anchor" href="#复制数据库行" aria-hidden="true">#</a> 复制数据库行</h2><p>没有深入的解释，这里是制作数据库行数据副本的最佳方法</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$task</span> <span class="token operator">=</span> <span class="token class-name static-context">Tasks</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$newTask</span> <span class="token operator">=</span> <span class="token variable">$task</span><span class="token operator">-&gt;</span><span class="token function">replicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$newTask</span><span class="token operator">-&gt;</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="大数据量的情况下请使用chunk-方法" tabindex="-1"><a class="header-anchor" href="#大数据量的情况下请使用chunk-方法" aria-hidden="true">#</a> 大数据量的情况下请使用<code>chunk()</code>方法</h2><p>不完全是Eloquent的相关，它更多的是collect，但仍然强大。方便您处理更大的数据集，您可以把它们分成几块。</p><ul><li>您之前可能这样写</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$users</span> <span class="token keyword">as</span> <span class="token variable">$user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>更优雅的示范</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">chunk</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$users</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$users</span> <span class="token keyword">as</span> <span class="token variable">$user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建模型时创建更多的东西" tabindex="-1"><a class="header-anchor" href="#创建模型时创建更多的东西" aria-hidden="true">#</a> 创建模型时创建更多的东西</h2><p>您可能知道 Laravel 的 artisan 命令，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan make:model Company
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是您知道有三个有用的标志可以为模型生成相关的文件吗？</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan make:model Company <span class="token parameter variable">-mcr</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>-m</code> 创建数据库迁移文件</li><li><code>-c</code> 创建一个controller控制器</li><li><code>-r</code> 将声明控制器应该是资源控制器</li></ul><h2 id="在保存时覆盖-updated-at" tabindex="-1"><a class="header-anchor" href="#在保存时覆盖-updated-at" aria-hidden="true">#</a> 在保存时覆盖 updated_at</h2><p>您知道执行 <code>-&gt;save()</code> 方法可以接受参数吗？因此，您可以告诉它“忽略”<code>updated_at</code>默认功能以填充当前时间戳。</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$product</span> <span class="token operator">=</span> <span class="token class-name static-context">Product</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$product</span><span class="token operator">-&gt;</span><span class="token property">updated_at</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;2019-01-01 10:00:00&#39;</span><span class="token punctuation">;</span>
<span class="token variable">$product</span><span class="token operator">-&gt;</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;timestamps&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里您用您预先定义的覆盖默认<code>updated_at</code>，当前修改行的时间将被设置为上面的<code>2019-01-01 10:00:00</code>。</p><h2 id="update-的结果是什么" tabindex="-1"><a class="header-anchor" href="#update-的结果是什么" aria-hidden="true">#</a> <code>update()</code>的结果是什么？</h2><p>您有没有想过这段代码实际返回的内容？</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$products</span><span class="token operator">-&gt;</span><span class="token function">whereNull</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;category_id&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;category_id&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更新如果在数据库中执行，但是<code>$result</code>包含什么？</p><p>答案是更新操作所影响的行数。</p><p>所以如果您需要检查有多少行受到影响，则不需要调用其他方法，<code>update()</code> 方法将为您返回此数字。</p><h2 id="将括号转换为一个eloquent的查询" tabindex="-1"><a class="header-anchor" href="#将括号转换为一个eloquent的查询" aria-hidden="true">#</a> 将括号转换为一个Eloquent的查询</h2><p>如果您有<code>and|or</code>混入你的SQL查询，如下所示：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>gender <span class="token operator">=</span> <span class="token string">&#39;Male&#39;</span> <span class="token operator">and</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>gender <span class="token operator">=</span> <span class="token string">&#39;Female&#39;</span> <span class="token operator">and</span> age <span class="token operator">&gt;=</span> <span class="token number">65</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如何把它翻译成Eloquent呢？这是错误的方式：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$q</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;gender&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Male&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$q</span><span class="token operator">-&gt;</span><span class="token function">orWhere</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&gt;=&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$q</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;gender&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Female&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$q</span><span class="token operator">-&gt;</span><span class="token function">orWhere</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&gt;=&#39;</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正确的方法稍微复杂一点，使用闭包函数作为子查询：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$q</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;gender&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Male&#39;</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&gt;=&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">orWhere</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;gender&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Female&#39;</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&gt;=&#39;</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="orwhere有多个参数的地方" tabindex="-1"><a class="header-anchor" href="#orwhere有多个参数的地方" aria-hidden="true">#</a> <code>orWhere</code>有多个参数的地方</h2><p>最后，您可以将一组参数传递给<code>orwhere()</code></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$q</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$q</span><span class="token operator">-&gt;</span><span class="token function">orWhere</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$q</span><span class="token operator">-&gt;</span><span class="token function">orWhere</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>更优雅的做法</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$q</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$q</span><span class="token operator">-&gt;</span><span class="token function">orWhere</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;b&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;c&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,41),x={href:"https://laravel-news.com/eloquent-tips-tricks",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/laravel/framework/blob/5.6/src/Illuminate/Database/Eloquent/Model.php",target:"_blank",rel:"noopener noreferrer"},$={href:"https://laravel-china.org/docs/laravel/5.6/eloquent#query-scopes",target:"_blank",rel:"noopener noreferrer"},U={href:"http://laraveldaily.com/eloquent-order-results-mutator-attribute/",target:"_blank",rel:"noopener noreferrer"};function E(A,T){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("blockquote",null,[n("p",null,[s("英文原文："),n("a",r,[s("20 Laravel Eloquent Tips and Tricks"),e(a)])])]),d,n("p",null,[s("这里假设您想在那个时候生成"),n("a",k,[s("uuid"),e(a)]),s("字段。")]),v,n("p",null,[s("更多请查看默认"),n("a",g,[s("抽象模型类"),e(a)]),s("的代码并查看所有使用的特征。")]),m,n("blockquote",null,[n("p",null,[s("**注意：**函数名称是不同的，它不是"),b,s("，而是"),h,s("。"),n("a",f,[s("更多可以参考这里"),e(a)])])]),q,n("p",null,[s("更多"),n("a",y,[s("查询作用域参考这里"),e(a)])]),w,n("ul",null,[n("li",null,[n("a",x,[s("英文原文：20 Laravel Eloquent Tips and Tricks"),e(a)])]),n("li",null,[n("a",_,[s("Laravel源码 - Abstract Model class"),e(a)])]),n("li",null,[n("a",$,[s("Eloquent手册 - 查询作用域"),e(a)])]),n("li",null,[n("a",U,[s("Eloquent: How to Order Results by Mutator Attribute?"),e(a)])])])])}const M=p(i,[["render",E],["__file","eloquent-tips-tricks.html.vue"]]);export{M as default};
