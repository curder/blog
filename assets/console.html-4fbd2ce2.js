import{_ as t,M as p,p as o,q as c,R as n,t as s,N as e,a1 as i}from"./framework-7e09d608.js";const l={},u=n("h1",{id:"console-命令",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#console-命令","aria-hidden":"true"},"#"),s(" Console 命令")],-1),r=n("p",null,"Console 组件允许创建 command-line 命令。console（控制台）命令可以用于任何反复执行的任务，比如 cron-jobs，imports（导入），或其他批处理工作。",-1),d=n("p",null,"示例创建一个 CreateUserCommand 命令。",-1),k={href:"https://github.com/curder/symfony-components/tree/console",target:"_blank",rel:"noopener noreferrer"},m=i(`<h2 id="安装前的准备" tabindex="-1"><a class="header-anchor" href="#安装前的准备" aria-hidden="true">#</a> 安装前的准备</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> symfony-components <span class="token comment"># 创建目录</span>
<span class="token builtin class-name">cd</span> symfony-components <span class="token comment"># 进入到工作目录 </span>

<span class="token function">composer</span> init <span class="token comment"># 初始化 Composer 信息</span>

<span class="token function">mkdir</span> src/ <span class="token comment"># 创建源代码目录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>composer.json</code> 文件如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;curder/symfony-components&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Discover Symfony Components&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;authors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;curder&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;q.curder@gmail.com&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;php&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&gt;=7.2.5&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;autoload&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;psr-4&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;Curder\\\\&quot;</span><span class="token operator">:</span> <span class="token string">&quot;src/&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">composer</span> require symfony/console @stable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>如果在 <code>Symfony</code> 应用程序之外安装这个组件，必须在代码中包含 <code>vendor/autoload.php</code> 文件来启用 Composer 提供的类的自动加载机制。</p></blockquote><h2 id="创建一个console程序" tabindex="-1"><a class="header-anchor" href="#创建一个console程序" aria-hidden="true">#</a> 创建一个Console程序</h2><p>首先，需要建立一个 PHP 脚本来定义控制台程序，在项目的根目录下，建立 <code>demo</code> 文件：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>#!/usr/bin/env php

<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">require</span> <span class="token constant">__DIR__</span><span class="token operator">.</span><span class="token string single-quoted-string">&#39;/vendor/autoload.php&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Console<span class="token punctuation">\\</span>Application</span><span class="token punctuation">;</span>

<span class="token variable">$app</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Symfony Console&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;0.1.0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义项目名称和版本</span>

<span class="token comment">// 注册命令</span>
<span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CreateUserCommand</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建命令" tabindex="-1"><a class="header-anchor" href="#创建命令" aria-hidden="true">#</a> 创建命令</h2><p>命令通过类来定义，这里定义为 <code>CreateUserCommand</code> 类。类的定义遵循如下结构：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Console<span class="token punctuation">\\</span>Command<span class="token punctuation">\\</span>Command</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Console<span class="token punctuation">\\</span>Input<span class="token punctuation">\\</span>InputInterface</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Console<span class="token punctuation">\\</span>Output<span class="token punctuation">\\</span>OutputInterface</span><span class="token punctuation">;</span>
 
<span class="token keyword">class</span> <span class="token class-name-definition class-name">CreateUserCommand</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">execute</span><span class="token punctuation">(</span><span class="token class-name type-declaration">InputInterface</span> <span class="token variable">$input</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">OutputInterface</span> <span class="token variable">$output</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置命令" tabindex="-1"><a class="header-anchor" href="#配置命令" aria-hidden="true">#</a> 配置命令</h2><h3 id="配置名称和描述" tabindex="-1"><a class="header-anchor" href="#配置名称和描述" aria-hidden="true">#</a> 配置名称和描述</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// ...</span>
<span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user:create&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 设置命令名称</span>
         <span class="token operator">-&gt;</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Create new user&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 命令简短描述</span>
         <span class="token operator">-&gt;</span><span class="token function">setHelp</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;This command allows you to create users...&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 运行命令时使用 &quot;--help&quot; 选项时的完整命令描述</span>
<span class="token comment">//         -&gt;addOption(&#39;is_admin&#39;, &#39;alias&#39;, InputArgument::OPTIONAL, InputOption::VALUE_NONE, &#39;It\\&#39;s admin user.&#39;)</span>
<span class="token comment">//         -&gt;setDefinition([</span>
<span class="token comment">//             new InputArgument(&#39;username&#39;, InputArgument::REQUIRED, &#39;The username of the user.&#39;),</span>
<span class="token comment">//             new InputOption(&#39;is_admin&#39;, &#39;alias&#39;, InputArgument::OPTIONAL, InputOption::VALUE_NONE, &#39;It\\&#39;s admin user.&#39;),</span>
<span class="token comment">//         ])</span>
         <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>setDescription()</code> 配置命令的简单描述</li><li><code>setHelp()</code> 运行命令时使用 &quot;--help&quot; 选项时的完整命令描述</li></ul><h3 id="配置用户输入" tabindex="-1"><a class="header-anchor" href="#配置用户输入" aria-hidden="true">#</a> 配置用户输入</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Console<span class="token punctuation">\\</span>Input<span class="token punctuation">\\</span>InputArgument</span><span class="token punctuation">;</span>
 
<span class="token comment">// ...</span>
<span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$this</span>
        <span class="token comment">// 配置一个必须参数，如果是可选参数 InputArgument::OPTIONAL，如果是数组参数 InputArgument::IS_ARRAY</span>
        <span class="token operator">-&gt;</span><span class="token function">addArgument</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;username&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">InputArgument</span><span class="token operator">::</span><span class="token constant">REQUIRED</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;The username of the user.&#39;</span><span class="token punctuation">)</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置输出" tabindex="-1"><a class="header-anchor" href="#配置输出" aria-hidden="true">#</a> 配置输出</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">execute</span><span class="token punctuation">(</span><span class="token class-name type-declaration">InputInterface</span> <span class="token variable">$input</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">OutputInterface</span> <span class="token variable">$output</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$output</span><span class="token operator">-&gt;</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;User Creator&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;============&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token comment">// retrieve the argument value using getArgument()</span>
    <span class="token comment">// 使用 getArgument() 取出参数值</span>
    <span class="token variable">$output</span><span class="token operator">-&gt;</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Username: &lt;info&gt;&#39;</span><span class="token operator">.</span><span class="token variable">$input</span><span class="token operator">-&gt;</span><span class="token function">getArgument</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;username&#39;</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;&lt;/info&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token keyword">return</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">SUCCESS</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值" aria-hidden="true">#</a> 返回值</h4><ul><li><code>return self::SUCCESS; // 0</code></li><li><code>return self::FAILURE; // 1</code></li><li><code>return self::INVALID; // 2</code></li></ul><h3 id="执行命令" tabindex="-1"><a class="header-anchor" href="#执行命令" aria-hidden="true">#</a> 执行命令</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./demo user:create Curder
User Creator
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>

Username: Curder
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="单元测试" tabindex="-1"><a class="header-anchor" href="#单元测试" aria-hidden="true">#</a> 单元测试</h2><h3 id="前置准备" tabindex="-1"><a class="header-anchor" href="#前置准备" aria-hidden="true">#</a> 前置准备</h3><h4 id="安装-phpunit-phpunit" tabindex="-1"><a class="header-anchor" href="#安装-phpunit-phpunit" aria-hidden="true">#</a> 安装 phpunit/phpunit</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">composer</span> require <span class="token parameter variable">--dev</span> phpunit/phpunit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="配置-phpunit-xml" tabindex="-1"><a class="header-anchor" href="#配置-phpunit-xml" aria-hidden="true">#</a> 配置 phpunit xml</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phpunit</span> <span class="token attr-name">bootstrap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vendor/autoload.php<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name">cacheResult</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name">colors</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testsuites</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testsuite</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Tests<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>tests<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testsuite</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testsuites</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phpunit</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="断言输出" tabindex="-1"><a class="header-anchor" href="#断言输出" aria-hidden="true">#</a> 断言输出</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>    <span class="token doc-comment comment">/** <span class="token keyword">@test</span> */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">it_should_run_user_create_command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$command_name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;user:create&#39;</span><span class="token punctuation">;</span>
        <span class="token comment">// Set up your Application with your command.</span>
        <span class="token variable">$application</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Console<span class="token punctuation">\\</span>Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Here&#39;s where you would inject any mocked dependencies as needed.</span>
        <span class="token variable">$application</span><span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CreateUserCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$foundCommand</span> <span class="token operator">=</span> <span class="token variable">$application</span><span class="token operator">-&gt;</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$command_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$tester</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Console<span class="token punctuation">\\</span>Tester<span class="token punctuation">\\</span>CommandTester</span><span class="token punctuation">(</span><span class="token variable">$foundCommand</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// &#39;./demo user:create Curder&#39;</span>
        <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token variable">$tester</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;command&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$command_name</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;username&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Curder&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$output</span> <span class="token operator">=</span> <span class="token variable">$tester</span><span class="token operator">-&gt;</span><span class="token function">getDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$assertStringContainsString</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Username: Curder&#39;</span><span class="token punctuation">,</span> <span class="token variable">$output</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$assertEquals</span><span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Console<span class="token punctuation">\\</span>Command<span class="token punctuation">\\</span>Command</span><span class="token operator">::</span><span class="token constant">SUCCESS</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试参数必选" tabindex="-1"><a class="header-anchor" href="#测试参数必选" aria-hidden="true">#</a> 测试参数必选</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>    <span class="token doc-comment comment">/** <span class="token keyword">@test</span> */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">it_has_require_user_name_argument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">expectException</span><span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Console<span class="token punctuation">\\</span>Exception<span class="token punctuation">\\</span>RuntimeException</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">expectErrorMessage</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Not enough arguments (missing: &quot;username&quot;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$command_name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;user:create&#39;</span><span class="token punctuation">;</span>
        <span class="token comment">// Set up your Application with your command.</span>
        <span class="token variable">$application</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Console<span class="token punctuation">\\</span>Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Here&#39;s where you would inject any mocked dependencies as needed.</span>
        <span class="token variable">$application</span><span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CreateUserCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$foundCommand</span> <span class="token operator">=</span> <span class="token variable">$application</span><span class="token operator">-&gt;</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$command_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$tester</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Console<span class="token punctuation">\\</span>Tester<span class="token punctuation">\\</span>CommandTester</span><span class="token punctuation">(</span><span class="token variable">$foundCommand</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// Execute the command. This example would be the equivalent of</span>
        <span class="token comment">// &#39;./demo user:create&#39;</span>
        <span class="token variable">$tester</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;command&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$command_name</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,36),v={href:"https://symfony.com/doc/current/components/console.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/curder/symfony-components/tree/console",target:"_blank",rel:"noopener noreferrer"};function h(g,f){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,r,d,n("p",null,[n("a",k,[s("GitHub 实例代码库 - curder/symfony-components"),e(a)])]),m,n("ul",null,[n("li",null,[n("a",v,[s("The Console Component 文档"),e(a)])]),n("li",null,[n("a",b,[s("curder/symfony-components"),e(a)])])])])}const q=t(l,[["render",h],["__file","console.html.vue"]]);export{q as default};
