import{_ as c,M as r,p as i,q as o,R as a,t as e,N as s,a1 as t}from"./framework-96b046e1.js";const p={},u=a("h1",{id:"使用-laravel-query-cache-来缓存数据库的-select-请求",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#使用-laravel-query-cache-来缓存数据库的-select-请求","aria-hidden":"true"},"#"),e(" 使用 laravel-query-cache 来缓存数据库的 SELECT 请求")],-1),d=a("p",null,"在实际的开发中，经常需要缓存查询数据库的结果以提升软件的性能。",-1),h={href:"https://github.com/Neurony/laravel-query-cache",target:"_blank",rel:"noopener noreferrer"},v=t(`<blockquote><p>由于使用到了 laravel 的缓存 tag 标记，支持的缓存驱动有：<code>apc</code>, <code>array</code>, <code>redis</code>, <code>memcached</code>，这里推荐使用的缓存驱动是：<code>redis</code>。</p></blockquote><h2 id="安装和配置" tabindex="-1"><a class="header-anchor" href="#安装和配置" aria-hidden="true">#</a> 安装和配置</h2><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><p>执行下面的两条命令，安装拓展包和获取拓展包的配置文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">composer</span> require neurony/laravel-query-cache

php artisan vendor:publish <span class="token parameter variable">--provider</span><span class="token operator">=</span><span class="token string">&quot;Neurony\\QueryCache\\ServiceProvider&quot;</span> <span class="token parameter variable">--tag</span><span class="token operator">=</span><span class="token string">&quot;config&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3><ul><li>修改项目环境文件 <code>.env</code> 中，添加如下环境变量：</li></ul><div class="language-dotenv line-numbers-mode" data-ext="dotenv"><pre class="language-dotenv"><code># The driver used for storing the cache keys that this package generates.
# This driver can differ from your main Laravel&#39;s CACHE_DRIVER.
QUERY_CACHE_DRIVER=redis

# Wether to cache absolutely all queries for the current request.
CACHE_ALL_QUERIES=true

# Wether to cache only the duplicated queries for the current request.
CACHE_DUPLICATE_QUERIES=true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>修改要缓存的模型添加 traits</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Neurony<span class="token punctuation">\\</span>QueryCache<span class="token punctuation">\\</span>Traits<span class="token punctuation">\\</span>IsCacheable</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">YourModel</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">IsCacheable</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2>`,11),k={href:"https://github.com/barryvdh/laravel-debugbar",target:"_blank",rel:"noopener noreferrer"},m=t(`<p>比如获取所有的用户数据</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>App<span class="token punctuation">\\</span>User</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),b=["src"],g=t(`<p>再比如获取关联数据缓存</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>App<span class="token punctuation">\\</span>User</span><span class="token operator">::</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;posts&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),_=["src"],y=a("h2",{id:"参考地址",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#参考地址","aria-hidden":"true"},"#"),e(" 参考地址")],-1),f={href:"https://github.com/Neurony/laravel-query-cache",target:"_blank",rel:"noopener noreferrer"};function q(l,E){const n=r("ExternalLinkIcon");return i(),o("div",null,[u,d,a("p",null,[e("这里使用"),a("a",h,[e("Neurony/laravel-query-cache"),s(n)]),e("来实现缓存，正如拓展包 README 中说到的，它专注于允许所有的查询操作，或者是在一次请求中重复的数据库查询。")]),v,a("p",null,[e("我们通过"),a("a",k,[e("barryvdh/laravel-debugbar"),s(n)]),e(" 来查看优化结果。")]),m,a("img",{src:l.$withBase("/images/languages/laravel/packages/using-laravel-query-cache-package-to-optimize-laravel-eloquent-queries/laravel-query-cache.png"),alt:""},null,8,b),g,a("img",{src:l.$withBase("/images/languages/laravel/packages/using-laravel-query-cache-package-to-optimize-laravel-eloquent-queries/laravel-query-cache-relationship-data.png"),alt:""},null,8,_),y,a("ul",null,[a("li",null,[a("a",f,[e("Neurony/laravel-query-cache"),s(n)])])])])}const C=c(p,[["render",q],["__file","using-laravel-query-cache-package-to-optimize-laravel-eloquent-queries.html.vue"]]);export{C as default};
