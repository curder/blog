import{_ as o,M as i,p as r,q as l,R as e,t as n,N as a,a1 as c}from"./framework-7e09d608.js";const d={},t=e("h1",{id:"docker的安装和简单配置",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#docker的安装和简单配置","aria-hidden":"true"},"#"),n(" Docker的安装和简单配置")],-1),p=e("h2",{id:"系统要求",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#系统要求","aria-hidden":"true"},"#"),n(" 系统要求")],-1),u={href:"https://docs.docker.com/engine/install/centos/#os-requirements",target:"_blank",rel:"noopener noreferrer"},m=c(`<h2 id="卸载旧版本" tabindex="-1"><a class="header-anchor" href="#卸载旧版本" aria-hidden="true">#</a> 卸载旧版本</h2><p>旧版本的 Docker 称为 docker 或者 docker-engine，使用以下命令卸载旧版本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum remove <span class="token function">docker</span> <span class="token punctuation">\\</span>
                docker-client <span class="token punctuation">\\</span>
                docker-client-latest <span class="token punctuation">\\</span>
                docker-common <span class="token punctuation">\\</span>
                docker-latest <span class="token punctuation">\\</span>
                docker-latest-logrotate <span class="token punctuation">\\</span>
                docker-logrotate <span class="token punctuation">\\</span>
                docker-selinux <span class="token punctuation">\\</span>
                docker-engine-selinux <span class="token punctuation">\\</span>
                docker-engine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>鉴于国内网络问题，强烈建议使用国内源，官方源请在注释中查看，如果服务器在海外可以使用官方源。</p><p>执行下面的命令添加 yum 软件源：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils

<span class="token comment"># 官方源</span>
<span class="token function">sudo</span> yum-config-manager <span class="token punctuation">\\</span>
     --add-repo <span class="token punctuation">\\</span>
     https://download.docker.com/linux/centos/docker-ce.repo

<span class="token comment">## 阿里云源</span>
<span class="token comment">#sudo yum-config-manager \\</span>
<span class="token comment">#    --add-repo \\</span>
<span class="token comment">#    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span>
<span class="token comment">#</span>
<span class="token comment">#sudo sed -i &#39;s/download.docker.com/mirrors.aliyun.com\\/docker-ce/g&#39; /etc/yum.repos.d/docker-ce.repo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="安装docker" tabindex="-1"><a class="header-anchor" href="#安装docker" aria-hidden="true">#</a> 安装Docker</h2><p>更新 yum 软件源缓存，并安装 docker-ce。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> docker-ce docker-ce-cli containerd.io docker-compose-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="启动docker" tabindex="-1"><a class="header-anchor" href="#启动docker" aria-hidden="true">#</a> 启动Docker</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>
<span class="token function">sudo</span> systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置docker" tabindex="-1"><a class="header-anchor" href="#配置docker" aria-hidden="true">#</a> 配置Docker</h2><h3 id="建立-docker-用户组" tabindex="-1"><a class="header-anchor" href="#建立-docker-用户组" aria-hidden="true">#</a> 建立 docker 用户组</h3><p>默认情况下，docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 root 用户。因此，更好地做法是将需要使用 docker 的用户加入 docker 用户组。</p><p>建立 docker 组：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">groupadd</span> <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将当前用户加入 docker 组：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-aG</span> <span class="token function">docker</span> <span class="token environment constant">$USER</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>可以把 <code>$USER</code> 变量替换为对应的用户名</p></blockquote><h2 id="添加内核参数" tabindex="-1"><a class="header-anchor" href="#添加内核参数" aria-hidden="true">#</a> 添加内核参数</h2><p>如果在 CentOS 使用 Docker 看到下面的这些警告信息：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>WARNING: bridge-nf-call-iptables is disabled
WARNING: bridge-nf-call-ip6tables is disabled
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>请添加内核配置参数以启用这些功能：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/sysctl.conf <span class="token operator">&lt;&lt;-</span><span class="token string">EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后重新加载 sysctl.conf 即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token parameter variable">-p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose" aria-hidden="true">#</a> docker-compose</h2>`,27),k={href:"https://github.com/docker/compose/releases",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/docker/compose/releases",target:"_blank",rel:"noopener noreferrer"},b=c(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">DOCKER_COMPOSE_VERSION</span><span class="token operator">=</span><span class="token number">2.5</span>.1 <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">&quot;https://github.com/docker/compose/releases/download/v<span class="token variable">$DOCKER_COMPOSE_VERSION</span>/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>&quot;</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose

<span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose <span class="token comment"># 授权可执行权限</span>

<span class="token function">docker-compose</span> <span class="token parameter variable">--version</span> <span class="token comment"># 检查版本</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function h(g,f){const s=i("ExternalLinkIcon");return r(),l("div",null,[t,p,e("p",null,[n("Docker 支持 64 位版本 CentOS 7/8，并且要求内核版本不低于 3.10。 CentOS 7 满足最低内核的要求，但由于内核版本比较低，部分功能（如 overlay2 存储层驱动）无法使用，并且部分功能可能不太稳定。"),e("a",u,[n("具体查看这里"),a(s)])]),m,e("p",null,[n("为了获得最新版本，请参考 "),e("a",k,[n("Docker 文档"),a(s)]),n("并从 Docker 的 GitHub 存储库中的二进制文件安装 Docker Compose。")]),e("p",null,[n("检查"),e("a",v,[n("当前版本"),a(s)]),n("，如有必要，在以下命令中更新它：")]),b])}const _=o(d,[["render",h],["__file","centos-7-install-and-configuration-docker.html.vue"]]);export{_ as default};
