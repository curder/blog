import{_ as c,p as t,q as a,R as e,a1 as d,t as s}from"./framework-fb0bc66b.js";const r={},n=d('<h1 id="查看被打包压缩的css和js文件" tabindex="-1"><a class="header-anchor" href="#查看被打包压缩的css和js文件" aria-hidden="true">#</a> 查看被打包压缩的CSS和JS文件</h1><p>有时为了减少网络的传输量，会把页面需要用到的CSS和JS打包混淆成一个文件，比如：<strong>首页</strong>对应<code>index.css</code>和<code>index.js</code>，<strong>关于我们</strong>的页面会对应<code>about.css</code>和<code>about.js</code>。</p><p>以个人blog为例，因为页面比较简单基于BootStrap4框架编写，所以全部页面只有<code>app.css</code>和<code>app.js</code>文件。</p><h2 id="查看静态css和js资源" tabindex="-1"><a class="header-anchor" href="#查看静态css和js资源" aria-hidden="true">#</a> 查看静态CSS和JS资源</h2><p>打开调试工具来到&quot;Sources&quot;-&gt;&quot;Network&quot;-&gt;选择具体的站点的CSS或者JS类型，如下：</p>',5),i=["src"],l=e("p",null,[s("通过路径找到上面的"),e("code",null,"{}"),s("按钮，点击它之后可以看到格式化之后的代码。")],-1);function p(o,h){return t(),a("div",null,[n,e("img",{src:o.$withBase("/images/tools/google-developer-tools/view-packed-css-and-js-files-css.png"),alt:""},null,8,i),l])}const _=c(r,[["render",p],["__file","view-packed-css-and-js-files.html.vue"]]);export{_ as default};
