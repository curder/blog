(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7567],{8519:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-5ea99ae6",path:"/languages/laravel/nova/how-to-defining-resources-authorization-in-laravel-nova.html",title:"使用 laravel nova 对资源进行权限控制",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"策略 Policies",slug:"策略-policies",children:[]},{level:2,title:"隐藏资源",slug:"隐藏资源",children:[]},{level:2,title:"字段",slug:"字段",children:[]},{level:2,title:"索引过滤",slug:"索引过滤",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],filePathRelative:"languages/laravel/nova/how-to-defining-resources-authorization-in-laravel-nova.md",git:{updatedTime:1628059224e3,contributors:[]}}},2287:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>P});var e=a(6252);const p=(0,e.Wm)("h1",{id:"使用-laravel-nova-对资源进行权限控制",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#使用-laravel-nova-对资源进行权限控制","aria-hidden":"true"},"#"),(0,e.Uk)(" 使用 laravel nova 对资源进行权限控制")],-1),t=(0,e.Wm)("p",null,"当访问 Nova 管理面板的用户只有你和你或者公司内部的开发团队时，Nova 接收请求之前可能不需要添加额外的授权的。",-1),o=(0,e.Wm)("p",null,"然而，如果想要提供给客户或者大型开发团队去访问时，可能希望对某些请求加上权限。",-1),c=(0,e.Wm)("p",null,"例如，只希望管理员可以删除记录。值得高兴的是，Nova 提供了一种简单的授权方法。",-1),l=(0,e.Wm)("h2",{id:"策略-policies",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#策略-policies","aria-hidden":"true"},"#"),(0,e.Uk)(" 策略 Policies")],-1),r=(0,e.Wm)("p",null,"为了限制用户是否可以查看、创建、更新、或者删除资源。",-1),u=(0,e.Uk)("Nova 利用了 Laravel "),i={href:"https://laravel.com/docs/authorization#creating-policies",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Uk)("授权策略"),d=(0,e.Uk)("，策略是一个用于管理特定模型或者资源授权逻辑的简单类。"),b=(0,e.uE)("<p>例如，如果程序是一个博客，可能有一个 <code>Post</code> 模型和相应的 <code>PostPolicy</code> 在你的程序中。</p><p>在 Nova 中操作资源时， Nova 会自动的尝试为模型找相应的策略。通常，这些策略会在应用程序的 <code>AuthServiceProvider</code> 中注册。如果 Nova 监测到你已经为模型注册了策略，他将在执行各自的操作前，自动检查该策略的相关授权方法，例如：</p><ul><li><code>viewAny</code></li><li><code>view</code></li><li><code>create</code></li><li><code>update</code></li><li><code>delete</code></li><li><code>restore</code></li><li><code>forceDelete</code></li></ul>",3),m=(0,e.Uk)("Laravel 5.8 默认自动会检测策略，"),h={href:"https://laravel-news.com/automatic-policy-resolution-laravel-5-8",target:"_blank",rel:"noopener noreferrer"},v=(0,e.Uk)("参看这里"),g=(0,e.uE)('<p>使用命令生成文件，文件地址在<code>app/Policies/PostPolicy.php</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>php artisan make:policy PostPolicy -m Post\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>不需要额外的配置！例如，要确定允许哪些用户能够更新 <code>Post</code> 模型，只需在相应的策略类上定义一个 update 方法</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Policies</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>User</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Post</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Auth<span class="token punctuation">\\</span>Access<span class="token punctuation">\\</span>HandlesAuthorization</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">PostPolicy</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">use</span> <span class="token package">HandlesAuthorization</span><span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * Determine whether the user can update the post.\n     *\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>App<span class="token punctuation">\\</span>User</span>  <span class="token parameter">$user</span>\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>App<span class="token punctuation">\\</span>Post</span>  <span class="token parameter">$post</span>\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">mixed</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span><span class="token class-name type-declaration">User</span> <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Post</span> <span class="token variable">$post</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">type</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;editor&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><blockquote><p><strong>未定义策略方法</strong></p><p>如果策略存在但缺少特定的操作方法的策略，所有用户将不会被允许执行相应的操作的。 所以，当已经定义策略后，请定义其所有的相关授权方法。例如 <code>return true;</code></p></blockquote><h2 id="隐藏资源" tabindex="-1"><a class="header-anchor" href="#隐藏资源" aria-hidden="true">#</a> 隐藏资源</h2><p>如果希望对用户隐藏一个 Nove 的实体资源，可以定义一个 <code>viewAny</code> 方法在对应模型的策略类上。</p><p>如果在该模型的策略类上没有 <code>viewAny</code> 方法，Nova 默认所有用户都能查看该资源：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Policies</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>User</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Post</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Auth<span class="token punctuation">\\</span>Access<span class="token punctuation">\\</span>HandlesAuthorization</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">PostPolicy</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">use</span> <span class="token package">HandlesAuthorization</span><span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * Determine whether the user can view any posts.\n     *\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>App<span class="token punctuation">\\</span>User</span>  <span class="token parameter">$user</span>\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">mixed</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">viewAny</span><span class="token punctuation">(</span><span class="token class-name type-declaration">User</span> <span class="token variable">$user</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">type</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;editor&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="字段" tabindex="-1"><a class="header-anchor" href="#字段" aria-hidden="true">#</a> 字段</h2><p>有时候，可能希望对某些用户组隐藏某些字段。</p><p>可以通过 <code>canSee</code> 方法链接到字段的定义，轻松完成这个操作。<code>canSee</code> 该方法接收一个返回 <code>true</code> 或 <code>false</code> 布尔值的一个闭包函数。</p><p>然而这个闭包函数接收 HTTP 的请求对象作为参数</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Nova<span class="token punctuation">\\</span>Fields<span class="token punctuation">\\</span>ID</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Nova<span class="token punctuation">\\</span>Fields<span class="token punctuation">\\</span>Text</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * 获取资源显示的字段。\n *\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span>  <span class="token parameter">$request</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">array</span></span>\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">fields</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>\n        <span class="token class-name static-context">ID</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">sortable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n        <span class="token class-name static-context">Text</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Name&#39;</span><span class="token punctuation">)</span>\n                <span class="token operator">-&gt;</span><span class="token function">sortable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token operator">-&gt;</span><span class="token function">canSee</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">return</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">can</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;viewProfile&#39;</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>上面的例子中，在 User 模型里使用 Laravel 的 <code>Authorizable trait</code> 的 <code>can</code> 方法，来确定授权用户是否被授权 <code>viewProfile</code> 动作。然而，由于代理授权策略方法是 canSee 的常见用例，你可以使用 <code>canSeeWhen</code> 方法实现相同的行为。<code>canSeeWhen</code> 方法与 <code>Illuminate\\Foundation\\Auth\\Access\\Authorizabletrait</code> 的 <code>can</code> 方法有相同的方法签名</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token class-name static-context">Text</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Name&#39;</span><span class="token punctuation">)</span>\n        <span class="token operator">-&gt;</span><span class="token function">sortable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token operator">-&gt;</span><span class="token function">canSeeWhen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;viewProfile&#39;</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="索引过滤" tabindex="-1"><a class="header-anchor" href="#索引过滤" aria-hidden="true">#</a> 索引过滤</h2><p>可能会注意到，从策略的 <code>view</code> 方法返回 <code>false</code> 并不会阻止给定的资源出现在资源索引中。</p><p>要从资源索引查询中过滤模型，你可以复写在你资源中的 <code>indexQuery</code> 方法，这个方法已经定义在你的 <code>App\\Nova\\Resource</code> 的基类中，可以简单地将其复制并粘贴到特定的资源中，然后修改查询：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token doc-comment comment">/**\n *  为给定的资源构建一个“索引”查询。\n *\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>Laravel<span class="token punctuation">\\</span>Nova<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Requests<span class="token punctuation">\\</span>NovaRequest</span>  <span class="token parameter">$request</span>\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Builder</span>  <span class="token parameter">$query</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Builder</span>\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">indexQuery</span><span class="token punctuation">(</span><span class="token class-name type-declaration">NovaRequest</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',21),y={href:"https://nova.laravel.com/docs/2.0/resources/authorization.html#authorization",target:"_blank",rel:"noopener noreferrer"},w=(0,e.Uk)("Laravel Nova Authorization"),f={href:"https://learnku.com/docs/nova/1.0/to-grant-authorization/2193",target:"_blank",rel:"noopener noreferrer"},A=(0,e.Uk)("Laravel Nova 授权"),P={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,t,o,c,l,r,(0,e.Wm)("p",null,[u,(0,e.Wm)("a",i,[k,(0,e.Wm)(a)]),d]),b,(0,e.Wm)("blockquote",null,[(0,e.Wm)("p",null,[m,(0,e.Wm)("a",h,[v,(0,e.Wm)(a)])])]),g,(0,e.Wm)("ul",null,[(0,e.Wm)("li",null,[(0,e.Wm)("a",y,[w,(0,e.Wm)(a)])]),(0,e.Wm)("li",null,[(0,e.Wm)("a",f,[A,(0,e.Wm)(a)])])])],64)}}}}]);