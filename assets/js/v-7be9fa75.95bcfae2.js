"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9756],{7560:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-7be9fa75",path:"/languages/javascript/webpack2/loading-css-related-configuration.html",title:"加载CSS的相关配置",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"安装",slug:"安装",children:[]},{level:2,title:"配置",slug:"配置",children:[]},{level:2,title:"测试",slug:"测试",children:[]}],filePathRelative:"languages/javascript/webpack2/loading-css-related-configuration.md",git:{updatedTime:1640243532e3,contributors:[{name:"curder",email:"q.curder@gmail.com",commits:1}]}}},8770:(s,n,a)=>{a.r(n),a.d(n,{default:()=>c});const e=(0,a(6252).uE)('<h1 id="加载css的相关配置" tabindex="-1"><a class="header-anchor" href="#加载css的相关配置" aria-hidden="true">#</a> 加载CSS的相关配置</h1><p>CSS相关的loader包含<code>css-loader</code>和<code>style-loader</code>。</p><p>其中<code>css-loader</code>主要是处理<code>@import</code>和<code>url()</code>，如果<code>@import</code>加载的是外部资源，那么就跳过，只处理本地资源。 而<code>style-loader</code>处理style标签。</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> i css-loader style-loader --save-dev\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token comment">// ...</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              modules<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><blockquote><p>注意在module中配置的<code>style-loader</code>和<code>css-loader</code>的先后顺序，webpack在解析时，是从右到左解析的。</p></blockquote><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2><p>在webpack配置的入口文件<code>app/index.css</code>中引入一个<code>main.css</code>文件。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ...</span>\n<span class="token keyword">import</span> <span class="token string">&#39;./main.css&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>编写这个css文件，内容如下：</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">body</span> <span class="token punctuation">{</span>\n    <span class="token property">background-color</span><span class="token punctuation">:</span> #eaeaea<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以看到我们在<code>main.css</code>中编写的CSS样式代码被webpack编译成<code>exports.push([module.i, &quot;body {\\n background-color: #eaeaea;\\n}\\n&quot;, &quot;&quot;]);</code>，最终被写入到HTML的head中实现作用。</p>',14),p={},c=(0,a(3744).Z)(p,[["render",function(s,n){return e}]])},3744:(s,n)=>{n.Z=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}}}]);