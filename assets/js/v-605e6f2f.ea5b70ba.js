(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9258],{8733:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-605e6f2f",path:"/languages/laravel/nova/how-to-use-resources-lenses-in-laravel-nova.html",title:"使用 laravel nova Lenses",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"定义 Lenses",slug:"定义-lenses",children:[{level:3,title:"Lens 过滤器",slug:"lens-过滤器",children:[]}]},{level:2,title:"注册 Lenses",slug:"注册-lenses",children:[]},{level:2,title:"授权 Lenses",slug:"授权-lenses",children:[]}],filePathRelative:"languages/laravel/nova/how-to-use-resources-lenses-in-laravel-nova.md",git:{updatedTime:1638951195e3,contributors:[]}}},9011:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>w});var e=a(6252);const p=(0,e.Wm)("h1",{id:"使用-laravel-nova-lenses",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#使用-laravel-nova-lenses","aria-hidden":"true"},"#"),(0,e.Uk)(" 使用 laravel nova Lenses")],-1),t=(0,e.Wm)("p",null,"与过滤器类似， Nova lenses 允许开发人员充分的定制资源的底层 Eloquent 查询。",-1),c=(0,e.Wm)("p",null,"例如，希望列出所有应用的用户，并按照总的收入来排序。",-1),l=(0,e.Wm)("p",null,"创建这样一个列表可能需要连接额外的数据表和在查询中执行聚合函数。",-1),o=(0,e.Wm)("p",null,"听起来挺复杂的，但是不要担心 - 这正是 lenses 旨在解决的场景:",-1),u=(0,e.uE)('<h2 id="定义-lenses" tabindex="-1"><a class="header-anchor" href="#定义-lenses" aria-hidden="true">#</a> 定义 Lenses</h2><p>使用 <code>nova:lens</code> Artisan 命令。默认情况下 Nova 会把新创建的 <code>lenses</code> 放置在 <code>app/Nova/Lenses</code> 目录下:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>php artisan nova:lens MostValuableUsers\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>每一个 Nova 创建的 Lens 都包含几个方法。然而，目前关注的两个方法是 <code>query</code> 和 <code>fields</code> 方法。<code>query</code> 方法负责创建获取所需数据的 Eloquent 查询，而 <code>fields</code> 方法返回了在查看 <code>lens</code> 时应当显示的字段的数组。</p><p>为了更深入的学习，来看一个完整 lens，该 lens 显示了用户和他们的终生收入:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Nova<span class="token punctuation">\\</span>Lenses</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Nova<span class="token punctuation">\\</span>Fields<span class="token punctuation">\\</span>ID</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Nova<span class="token punctuation">\\</span>Fields<span class="token punctuation">\\</span>Text</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Nova<span class="token punctuation">\\</span>Lenses<span class="token punctuation">\\</span>Lens</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Nova<span class="token punctuation">\\</span>Fields<span class="token punctuation">\\</span>Number</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>DB</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Nova<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Requests<span class="token punctuation">\\</span>LensRequest</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">MostValuableUsers</span> <span class="token keyword">extends</span> <span class="token class-name">Lens</span>\n<span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * 获取 lens 的查询创建器和分页器\n     *\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>Laravel<span class="token punctuation">\\</span>Nova<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Requests<span class="token punctuation">\\</span>LensRequest</span>  <span class="token parameter">$request</span>\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Builder</span>  <span class="token parameter">$query</span>\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">mixed</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">query</span><span class="token punctuation">(</span><span class="token class-name type-declaration">LensRequest</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">withOrdering</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">withFilters</span><span class="token punctuation">(</span>\n            <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">columns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                  <span class="token operator">-&gt;</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;licenses&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;users.id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;licenses.user_id&#39;</span><span class="token punctuation">)</span>\n                  <span class="token operator">-&gt;</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;revenue&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;desc&#39;</span><span class="token punctuation">)</span>\n                  <span class="token operator">-&gt;</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;users.id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;users.name&#39;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 获取应该选择的列\n     *\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">array</span></span>\n     */</span>\n    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">columns</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">[</span>\n            <span class="token string single-quoted-string">&#39;users.id&#39;</span><span class="token punctuation">,</span>\n            <span class="token string single-quoted-string">&#39;users.name&#39;</span><span class="token punctuation">,</span>\n            <span class="token class-name static-context">DB</span><span class="token operator">::</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;sum(licenses.price) as revenue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 获取 lens 可获取的字段\n     *\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span>  <span class="token parameter">$request</span>\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">array</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">fields</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">[</span>\n            <span class="token class-name static-context">ID</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ID&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token class-name static-context">Text</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n            <span class="token class-name static-context">Number</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Revenue&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;revenue&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;$&#39;</span><span class="token operator">.</span><span class="token function">number_format</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 获取 lens 可获取的过滤器\n     *\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span>  <span class="token parameter">$request</span>\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">array</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">filters</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 获取 lens 的 URI\n     *\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">string</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">uriKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;most-profitable-users&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br></div></div><blockquote><p><strong>Columns 方法</strong></p><p>在这个例子中，为了可读性， <code>columns</code> 方法已经从 <code>query</code> 方法中分离出来。它不是「必须」的，同时也不是 <code>lenses</code> 的一个 「特性」。</p></blockquote><p>正如你在上面的例子中所见到的， <code>query</code> 方法已经完全控制了获取 <code>lens</code> 数据的 Eloquent 查询。</p><p>为了让查询返回的数据合理的展示，<code>fields</code> 方法可以是任何 Nova 的字段。</p><h3 id="lens-过滤器" tabindex="-1"><a class="header-anchor" href="#lens-过滤器" aria-hidden="true">#</a> Lens 过滤器</h3>',10),r=(0,e.Uk)("每一个 Nova lens 都包含一个 "),i=(0,e.Wm)("code",null,"filters",-1),k=(0,e.Uk)(" 方法。这个方法可以让你把任何现存的 "),b={href:"/languages/laravel/nova/how-to-use-filters-in-laravel-nova.md",target:"_blank",rel:"noopener noreferrer"},m=(0,e.Uk)("过滤器"),d=(0,e.Uk)(" 添加到 "),g=(0,e.Wm)("code",null,"lens",-1),y=(0,e.Uk)(":"),v=(0,e.uE)('<div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Nova<span class="token punctuation">\\</span>Filters<span class="token punctuation">\\</span>UserType</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * 获取 lens 可以获取的过滤器\n *\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span>  <span class="token parameter">$request</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">array</span></span>\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">filters</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">UserType</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="注册-lenses" tabindex="-1"><a class="header-anchor" href="#注册-lenses" aria-hidden="true">#</a> 注册 Lenses</h2><p>一旦你定义了一个 lens，将它附加到一个资源中。每一个 Nova 生成的资源都包含一个 <code>lenses</code> 方法。要将一个 <code>lens</code> 附加一个资源中，你只需要简单的将它添加到 <code>lenses</code> 方法返回的数组中:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token doc-comment comment">/**\n * 获取属于该资源的 lenses\n *\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span>  <span class="token parameter">$request</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">array</span></span>\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">lenses</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Lenses<span class="token punctuation">\\</span>MostValuableUsers</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="授权-lenses" tabindex="-1"><a class="header-anchor" href="#授权-lenses" aria-hidden="true">#</a> 授权 Lenses</h2><p>如果只希望向某些的用户暴露特定的 <code>lens</code>，可以将 <code>canSee</code> 方法加入到 <code>lens</code> 注册链条中。</p><p><code>canSee</code> 方法接受一个返回 <code>true</code> 或 <code>false</code> 的闭包。该闭包会接收进入的 <code>HTTP</code> 请求。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>User</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * Get the lenses available for the resource.\n *\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span>  <span class="token parameter">$request</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">array</span></span>\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">lenses</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Lenses<span class="token punctuation">\\</span>MostValuableUsers</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">canSee</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">can</span><span class="token punctuation">(</span>\n                <span class="token string single-quoted-string">&#39;viewValuableUsers&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token keyword">class</span>\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>在上例中，<code>User</code> 模型中使用了 Authorizable trait 的 <code>can</code> 方法来判断授权的用户是否已经被授权访问 <code>viewValuableUsers</code> action。</p><p>然而对于 <code>canSee</code> 方法来说，通过代理方式访问授权规则的方法是常见的使用案例，因此可以使用 <code>canSeeWhen</code> 方法来实现相同的行为。</p><p><code>canSeeWhen</code> 方法拥有与 <code>Illuminate\\Foundation\\Auth\\Access\\Authorizable</code> <code>trait</code> 中 <code>can</code> 方法相同的方法签名:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token doc-comment comment">/**\n * 获取属于该 resource 的 lenses\n *\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span>  <span class="token parameter">$request</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">array</span></span>\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">lenses</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Lenses<span class="token punctuation">\\</span>MostValuableUsers</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">canSeeWhen</span><span class="token punctuation">(</span>\n            <span class="token string single-quoted-string">&#39;viewValuableUsers&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token keyword">class</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',12),w={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,t,c,l,o,(0,e.Wm)("img",{src:n.$withBase("/images/languages/laravel/nova/how-to-use-resources-lenses-in-laravel-nova/laravel-nova-lenses-show.png"),alt:""},null,8,["src"]),u,(0,e.Wm)("p",null,[r,i,k,(0,e.Wm)("a",b,[m,(0,e.Wm)(a)]),d,g,y]),v],64)}}}}]);