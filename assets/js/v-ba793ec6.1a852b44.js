"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6366],{9722:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-ba793ec6",path:"/others/requesting-the-lets-encrypt-wildcard-https-certificate.html",title:"申请Let's Encrypt通配符HTTPS证书",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"安装依赖程序",slug:"安装依赖程序",children:[]},{level:2,title:"安装acme.sh",slug:"安装acme-sh",children:[]},{level:2,title:"生成证书",slug:"生成证书",children:[{level:3,title:"http 验证",slug:"http-验证",children:[]},{level:3,title:"DNS验证",slug:"dns验证",children:[]}]},{level:2,title:"拷贝安装证书",slug:"拷贝安装证书",children:[]},{level:2,title:"更新证书",slug:"更新证书",children:[]},{level:2,title:"更新 acme.sh",slug:"更新-acme-sh",children:[]},{level:2,title:"更改web服务器启用https",slug:"更改web服务器启用https",children:[]},{level:2,title:"参考地址",slug:"参考地址",children:[]}],filePathRelative:"others/requesting-the-lets-encrypt-wildcard-https-certificate.md",git:{updatedTime:1640243532e3,contributors:[{name:"curder",email:"q.curder@gmail.com",commits:1}]}}},1407:(s,n,a)=>{a.r(n),a.d(n,{default:()=>W});var e=a(6252);const c=(0,e.uE)('<h1 id="申请let-s-encrypt通配符https证书" tabindex="-1"><a class="header-anchor" href="#申请let-s-encrypt通配符https证书" aria-hidden="true">#</a> 申请Let&#39;s Encrypt通配符HTTPS证书</h1><p>通配符证书是一个SSL证书，可用于为给定域上的所有子域提供https，例如，<code>*.&lt;domain&gt;.com</code> 意味着任何子域名（如<code>www.example.com</code>或<code>links.example.com</code>）会使用相同的SSL证书。</p><p>使用通配符证书对于允许用户选择子域的应用程序非常有用，例如，<code>wordpress.com</code>子域下的所有博客。</p>',3),p={href:"https://github.com/Neilpang/acme.sh",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("acme.sh"),t=(0,e.Uk)(" 实现了 "),o=(0,e._)("code",null,"acme",-1),r=(0,e.Uk)(" 协议, 可以从 letsencrypt 生成免费的证书。"),i=(0,e.uE)('<p>主要步骤:</p><ol start="0"><li>安装依赖</li><li>安装 <code>acme.sh</code></li><li>生成证书</li><li>拷贝安装证书到 <code>nginx/apache</code> 或者其他web服务器</li><li>更新证书</li><li>更新 acme.sh</li><li>更改web服务器启用https</li></ol><blockquote><p>记得在操作具体的命令之前将一些域名变量<code>&lt;domain&gt;.com</code>替换成你当前要操作的域名信息。</p></blockquote><h2 id="安装依赖程序" tabindex="-1"><a class="header-anchor" href="#安装依赖程序" aria-hidden="true">#</a> 安装依赖程序</h2><ul><li><p><code>Debian/Ubuntu</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">curl</span> -y <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">cron</span> -y <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> socat -y\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p><code>Centos</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token function">curl</span> -y <span class="token operator">&amp;&amp;</span> yum <span class="token function">install</span> <span class="token function">cron</span> -y <span class="token operator">&amp;&amp;</span> yum <span class="token function">install</span> socat -y\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><h2 id="安装acme-sh" tabindex="-1"><a class="header-anchor" href="#安装acme-sh" aria-hidden="true">#</a> 安装<code>acme.sh</code></h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> https://get.acme.sh <span class="token operator">|</span> <span class="token function">sh</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>输出如下内容：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">curl</span> https://get.acme.sh <span class="token operator">|</span> <span class="token function">sh</span>\n% Total % Received % Xferd Average Speed Time Time Time Current\nDload Upload Total Spent Left Speed\n<span class="token number">100</span> <span class="token number">705</span> <span class="token number">100</span> <span class="token number">705</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">2426</span> <span class="token number">0</span> --:--:-- --:--:-- --:--:-- <span class="token number">2422</span>\n% Total % Received % Xferd Average Speed Time Time Time Current\nDload Upload Total Spent Left Speed\n<span class="token number">100</span> 163k <span class="token number">100</span> 163k <span class="token number">0</span> <span class="token number">0</span> 400k <span class="token number">0</span> --:--:-- --:--:-- --:--:-- 401k\n<span class="token punctuation">[</span>Sun Mar <span class="token number">18</span> <span class="token number">20</span>:11:01 CST <span class="token number">2018</span><span class="token punctuation">]</span> Installing from online archive.\n<span class="token punctuation">[</span>Sun Mar <span class="token number">18</span> <span class="token number">20</span>:11:01 CST <span class="token number">2018</span><span class="token punctuation">]</span> Downloading https://github.com/Neilpang/acme.sh/archive/master.tar.gz\n<span class="token punctuation">[</span>Sun Mar <span class="token number">18</span> <span class="token number">20</span>:11:03 CST <span class="token number">2018</span><span class="token punctuation">]</span> Extracting master.tar.gz\n<span class="token punctuation">[</span>Sun Mar <span class="token number">18</span> <span class="token number">20</span>:11:03 CST <span class="token number">2018</span><span class="token punctuation">]</span> It is recommended to <span class="token function">install</span> socat first.\n<span class="token punctuation">[</span>Sun Mar <span class="token number">18</span> <span class="token number">20</span>:11:03 CST <span class="token number">2018</span><span class="token punctuation">]</span> We use socat <span class="token keyword">for</span> standalone server <span class="token keyword">if</span> you use standalone mode.\n<span class="token punctuation">[</span>Sun Mar <span class="token number">18</span> <span class="token number">20</span>:11:03 CST <span class="token number">2018</span><span class="token punctuation">]</span> If you don<span class="token string">&#39;t use standalone mode, just ignore this warning.\n[Sun Mar 18 20:11:03 CST 2018] Installing to /root/.acme.sh\n[Sun Mar 18 20:11:03 CST 2018] Installed to /root/.acme.sh/acme.sh\n[Sun Mar 18 20:11:03 CST 2018] Installing alias to &#39;</span>/root/.bashrc<span class="token string">&#39;\n[Sun Mar 18 20:11:03 CST 2018] OK, Close and reopen your terminal to start using acme.sh\n[Sun Mar 18 20:11:03 CST 2018] Installing alias to &#39;</span>/root/.cshrc<span class="token string">&#39;\n[Sun Mar 18 20:11:03 CST 2018] Installing alias to &#39;</span>/root/.tcshrc&#39;\n<span class="token punctuation">[</span>Sun Mar <span class="token number">18</span> <span class="token number">20</span>:11:03 CST <span class="token number">2018</span><span class="token punctuation">]</span> Installing <span class="token function">cron</span> job\n<span class="token punctuation">[</span>Sun Mar <span class="token number">18</span> <span class="token number">20</span>:11:03 CST <span class="token number">2018</span><span class="token punctuation">]</span> Good, <span class="token function">bash</span> is found, so change the shebang to use <span class="token function">bash</span> as preferred.\n<span class="token punctuation">[</span>Sun Mar <span class="token number">18</span> <span class="token number">20</span>:11:03 CST <span class="token number">2018</span><span class="token punctuation">]</span> OK\n<span class="token punctuation">[</span>Sun Mar <span class="token number">18</span> <span class="token number">20</span>:11:03 CST <span class="token number">2018</span><span class="token punctuation">]</span> Install success<span class="token operator">!</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><blockquote><p>脚本会自动为当前用户创建定时任务, 每天 <code>00:19</code> 自动检测所有的证书。<strong>如果快过期了, 需要更新, 则会自动更新证书。</strong></p></blockquote><p><strong>安装过程不会污染已有的系统任何功能和文件</strong>, 所有的修改都限制在安装目录中: <code>~/.acme.sh/</code></p><h2 id="生成证书" tabindex="-1"><a class="header-anchor" href="#生成证书" aria-hidden="true">#</a> 生成证书</h2><p><code>acme.sh</code> 实现了 <strong>acme</strong> 协议支持的所有验证协议. 一般有两种方式验证: <code>http</code> 和 <code>dns</code> 验证.</p><h3 id="http-验证" tabindex="-1"><a class="header-anchor" href="#http-验证" aria-hidden="true">#</a> http 验证</h3><h4 id="通用方式" tabindex="-1"><a class="header-anchor" href="#通用方式" aria-hidden="true">#</a> 通用方式</h4><p><code>http</code> 方式需要在你的网站根目录下放置一个文件, 来验证你的域名所有权,完成验证. 然后就可以生成证书了。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>~/.acme.sh/acme.sh --issue -d <span class="token operator">&lt;</span>domain<span class="token operator">&gt;</span>.com -d www.<span class="token operator">&lt;</span>domain<span class="token operator">&gt;</span>.com --webroot /home/wwwroot/<span class="token operator">&lt;</span>domain<span class="token operator">&gt;</span>.com/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>只需要指定域名, 并指定域名所在的网站根目录。 <code>acme.sh</code> 会全自动的生成验证文件, 并放到网站的根目录。然后自动完成验证，最后会聪明的删除验证文件，整个过程没有任何副作用。</p><h4 id="nginx" tabindex="-1"><a class="header-anchor" href="#nginx" aria-hidden="true">#</a> Nginx</h4><p>如果当前使用的是<code>nginx</code>服务器或者反代, <code>acme.sh</code> 还可以智能的从 <code>nginx</code>的配置中自动完成验证, 将不需要指定网站根目录:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>~/.acme.sh/acme.sh --issue -d <span class="token operator">&lt;</span>domain<span class="token operator">&gt;</span>.com --nginx\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="apache" tabindex="-1"><a class="header-anchor" href="#apache" aria-hidden="true">#</a> Apache</h4><p>如果你用的 <code>apache</code>服务器, <code>acme.sh</code> 还可以智能的从 <code>apache</code>的配置中自动完成验证, 你不需要指定网站根目录:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>~/.acme.sh/acme.sh --issue -d <span class="token operator">&lt;</span>domain<span class="token operator">&gt;</span>.com --apache\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>注意：无论是 <code>apache</code> 还是 <code>nginx</code> 模式, <code>acme.sh</code>在完成验证之后, 会恢复到之前的状态, 都不会私自更改你本身的配置. 好处是你不用担心配置被搞坏, 也有一个缺点, 你需要自己配置 <code>ssl</code> 的配置, 否则只能成功生成证书, 你的网站还是无法访问<code>https</code>。</p></blockquote><h4 id="standalone" tabindex="-1"><a class="header-anchor" href="#standalone" aria-hidden="true">#</a> standalone</h4><p>如果你还没有运行任何 web 服务, 80 端口是空闲的, 那么 acme.sh 还能假装自己是一个webserver, 临时听在80 端口, 完成验证:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>~/.acme.sh/acme.sh --issue -d <span class="token operator">&lt;</span>domain<span class="token operator">&gt;</span>.com --standalone\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>以上命令都将ssl相关数据写入到文件地址<code>~/USER/.acme.sh/&lt;domain&gt;.com/</code>下，包含<code>ca.cer</code>、<code>&lt;domain&gt;.com.conf</code>、<code>&lt;domain&gt;.com.key</code>、<code>fullchain.cer</code>、<code>&lt;domain&gt;.com.csr</code><br> 、<code>&lt;domain&gt;.com.cer</code>和<code>&lt;domain&gt;.com.csr.conf</code>。</p></blockquote><h3 id="dns验证" tabindex="-1"><a class="header-anchor" href="#dns验证" aria-hidden="true">#</a> DNS验证</h3><p><code>dns</code> 方式, 在域名上添加一条 <code>txt</code> 解析记录, 验证域名所有权。</p>',31),d=(0,e.Uk)("这里以aliyun获取api为例，可以访问此地址获取："),u={href:"https://ak-console.aliyun.com/#/accesskey",target:"_blank",rel:"noopener noreferrer"},m=(0,e.Uk)("https://ak-console.aliyun.com/#/accesskey"),b=(0,e.Uk)("。"),h=(0,e._)("br",null,null,-1),k=(0,e.Uk)(" 然后输入下面命令。其中 "),g=(0,e._)("code",null,'Ali_Key=""',-1),v=(0,e.Uk)("中输入个人在阿里云后台的"),f=(0,e._)("strong",null,"Access Key ID",-1),x=(0,e.Uk)("信息，"),y=(0,e._)("code",null,'Ali_Secret=""',-1),S=(0,e.Uk)("输入你的"),w=(0,e._)("strong",null,"Access Key Secret",-1),_=(0,e.Uk)("信息。"),T=(0,e.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">Ali_Key</span><span class="token operator">=</span><span class="token string">&quot;soamdagfqweaf&quot;</span>\n<span class="token builtin class-name">export</span> <span class="token assign-left variable">Ali_Secret</span><span class="token operator">=</span><span class="token string">&quot;asd213dfas&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>接下来再输入下面命令申请<code>Let’s Encrypt</code>泛域名免费SSL证书。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>~/.acme.sh/acme.sh --issue --dns dns_ali -d <span class="token operator">&lt;</span>domain<span class="token operator">&gt;</span>.com -d *.<span class="token operator">&lt;</span>domain<span class="token operator">&gt;</span>.com\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>第一次成功之后，<code>acme.sh</code>会记录下<code>App_Key</code>和<code>App_Secret</code> ，并且生成一个定时任务，每天凌晨0：00自动检测过期域名并且自动续期。对这种方式有顾虑的，请慎重，不过也可以自行删掉用户级的定时任务，并且清理掉<code>~/.acme.sh</code>文件夹就行。</p><h2 id="拷贝安装证书" tabindex="-1"><a class="header-anchor" href="#拷贝安装证书" aria-hidden="true">#</a> 拷贝安装证书</h2><p>前面证书生成以后, 接下来需要使用命令把证书拷贝到真正需要用它的地方。</p><p>**注意, **默认生成的证书都放在安装目录下: <code>~/.acme.sh/</code>，不要直接使用此目录下的文件。例如: 不要直接让 <code>nginx/apache</code> 的配置文件使用这下面的文件. 这里面的文件都是内部使用, 而且目录结构可能会变化.</p><p>正确的使用方法是使用 <code>--installcert</code> 命令,并指定目标位置, 然后证书文件会被copy到相应的位置，如果 <code>/etc/nginx/ssl</code> 不存在需要使用<code>mkdir</code> 命令创建<code>mkdir -p /etc/nginx/ssl</code>， 例如:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>~/.acme.sh/acme.sh --installcert -d <span class="token operator">&lt;</span>domain<span class="token operator">&gt;</span>.com <span class="token punctuation">\\</span>\n--key-file /etc/nginx/ssl/<span class="token operator">&lt;</span>domain<span class="token operator">&gt;</span>.com.key <span class="token punctuation">\\</span>\n--fullchain-file /etc/nginx/ssl/fullchain.cer <span class="token punctuation">\\</span>\n--reloadcmd <span class="token string">&quot;service nginx force-reload&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Nginx 的配置 <code>ssl_certificate</code> 使用 <code>/etc/nginx/ssl/fullchain.cer</code> ，而非 <code>/etc/nginx/ssl/&lt;domain&gt;.cer</code> ，否则 SSL Labs 的测试会报 Chain issues Incomplete 错误。</p><p><code>--installcert</code> 命令可以携带很多参数, 来指定目标文件. 并且可以指定 <code>reloadcmd</code>, 当证书更新以后, <code>reloadcmd</code>会被自动调用,让服务器生效.</p>',11),C=(0,e.Uk)("详细参数请参考: "),q={href:"https://github.com/Neilpang/acme.sh#3-install-the-issued-cert-to-apachenginx-etc",target:"_blank",rel:"noopener noreferrer"},U=(0,e.Uk)("https://github.com/Neilpang/acme.sh#3-install-the-issued-cert-to-apachenginx-etc"),M=(0,e.uE)('<p>值得注意的是, 这里指定的所有参数都会被自动记录下来, 并在将来证书自动更新以后, 被再次自动调用。</p><h2 id="更新证书" tabindex="-1"><a class="header-anchor" href="#更新证书" aria-hidden="true">#</a> 更新证书</h2><p>目前证书在 60 天以后会自动更新, 无需任何操作. 今后有可能会缩短这个时间, 不过都是自动的, 作为使用者不用关心。</p><h2 id="更新-acme-sh" tabindex="-1"><a class="header-anchor" href="#更新-acme-sh" aria-hidden="true">#</a> 更新 acme.sh</h2><p>目前由于 acme 协议和 letsencrypt CA 都在频繁的更新, 因此 <code>acme.sh</code> 也经常更新以保持同步</p><ul><li>升级 acme.sh 到最新版</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>acme.sh --upgrade\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>如果你不想手动升级, 可以开启自动升级<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>acme.sh --upgrade --auto-upgrade\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><p>之后, acme.sh 就会自动保持更新了.</p><ul><li>你也可以随时关闭自动更新<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>acme.sh --upgrade --auto-upgrade <span class="token number">0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><h2 id="更改web服务器启用https" tabindex="-1"><a class="header-anchor" href="#更改web服务器启用https" aria-hidden="true">#</a> 更改web服务器启用https</h2><p>这里以Nginx应用为例：</p><div class="language-nginx ext-nginx line-numbers-mode"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>\n    <span class="token directive"><span class="token keyword">listen</span>      <span class="token number">80</span></span><span class="token punctuation">;</span> <span class="token comment">## listen for ipv4</span>\n    <span class="token directive"><span class="token keyword">server_name</span>   &lt;domain&gt;.com</span><span class="token punctuation">;</span>\n    <span class="token directive"><span class="token keyword">return</span>      <span class="token number">301</span> https://<span class="token variable">$server_name</span><span class="token variable">$request_uri</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>\n    <span class="token directive"><span class="token keyword">charset</span> utf-8</span><span class="token punctuation">;</span>\n    <span class="token directive"><span class="token keyword">client_max_body_size</span> <span class="token number">128M</span></span><span class="token punctuation">;</span>\n\n    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">443</span></span><span class="token punctuation">;</span>\n\n    <span class="token comment"># SSL support</span>\n    <span class="token directive"><span class="token keyword">ssl</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>\n    <span class="token directive"><span class="token keyword">ssl_certificate</span>      ../ssl/fullchain.cer</span><span class="token punctuation">;</span>\n    <span class="token directive"><span class="token keyword">ssl_certificate_key</span>  ../ssl/&lt;domain&gt;.com.key</span><span class="token punctuation">;</span>\n\n    <span class="token directive"><span class="token keyword">server_name</span> &lt;domain&gt;.com</span><span class="token punctuation">;</span>\n    <span class="token directive"><span class="token keyword">root</span>        /web_path/public</span><span class="token punctuation">;</span>\n    <span class="token directive"><span class="token keyword">index</span>       index.php</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>更改完之后重启服务器<code>sudo systemctl reload nginx</code>，访问<code>&lt;domain&gt;.com</code>即可看到效果了。</p><blockquote><p>如果你使用的是 aliyun 等云服务器，可能还需要配置云服务器的<strong>安全组配置</strong>，将 443 端口开放访问。</p></blockquote><h2 id="参考地址" tabindex="-1"><a class="header-anchor" href="#参考地址" aria-hidden="true">#</a> 参考地址</h2>',16),L={href:"https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E",target:"_blank",rel:"noopener noreferrer"},A=(0,e.Uk)("Neilpang/acme.sh"),E={href:"https://my.oschina.net/kimver/blog/1634575#comment-list",target:"_blank",rel:"noopener noreferrer"},I=(0,e.Uk)("申请Let's Encrypt通配符HTTPS证书"),N={href:"https://www.wn789.com/15510.html",target:"_blank",rel:"noopener noreferrer"},D=(0,e.Uk)("使用阿里云域名API申请Let’s Encrypt泛域名免费SSL证书教程"),K={},W=(0,a(3744).Z)(K,[["render",function(s,n){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[c,(0,e._)("p",null,[(0,e._)("a",p,[l,(0,e.Wm)(a)]),t,o,r]),i,(0,e._)("p",null,[d,(0,e._)("a",u,[m,(0,e.Wm)(a)]),b,h,k,g,v,f,x,y,S,w,_]),T,(0,e._)("p",null,[C,(0,e._)("a",q,[U,(0,e.Wm)(a)])]),M,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",L,[A,(0,e.Wm)(a)])])]),(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",E,[I,(0,e.Wm)(a)])])]),(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",N,[D,(0,e.Wm)(a)])])])])],64)}]])},3744:(s,n)=>{n.Z=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}}}]);