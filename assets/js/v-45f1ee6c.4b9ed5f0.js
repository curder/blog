(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6408],{812:(e,a,s)=>{"use strict";s.r(a),s.d(a,{data:()=>n});const n={key:"v-45f1ee6c",path:"/tools/docker/installing-gitlab-services-using-docker-compose.html",title:"使用Docker Compose方式安装Gitlab服务",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"镜像",slug:"镜像",children:[]},{level:2,title:"Docker Compose Yam File",slug:"docker-compose-yam-file",children:[]},{level:2,title:"启动GitLab",slug:"启动gitlab",children:[]},{level:2,title:"相关命令",slug:"相关命令",children:[{level:3,title:"启动GitLab",slug:"启动gitlab-1",children:[]},{level:3,title:"停止 GitLab",slug:"停止-gitlab",children:[]},{level:3,title:"备份 GitLab",slug:"备份-gitlab",children:[]},{level:3,title:"从备份中还原",slug:"从备份中还原",children:[]}]},{level:2,title:"参考链接",slug:"参考链接",children:[]}],filePathRelative:"tools/docker/installing-gitlab-services-using-docker-compose.md",git:{updatedTime:1625566324e3,contributors:[]}}},1630:(e,a,s)=>{"use strict";s.r(a),s.d(a,{default:()=>be});var n=s(6252);const r=(0,n.Wm)("h1",{id:"使用docker-compose方式安装gitlab服务",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#使用docker-compose方式安装gitlab服务","aria-hidden":"true"},"#"),(0,n.Uk)(" 使用Docker Compose方式安装Gitlab服务")],-1),l={href:"https://about.gitlab.com/",target:"_blank",rel:"noopener noreferrer"},o=(0,n.Uk)("GitLab"),t=(0,n.Uk)("是一个开源的Git服务软件，在开发中使用广泛。它有很丰富的功能（Git 版本管理、文件浏览、WIKI、Code Review、Issue 管理、Code Snippets、Web Hooks、CI、CD等）。"),i=(0,n.Wm)("p",null,[(0,n.Uk)("使用Docker的方式来安装服务端软件是挺方便的。但是GitLab需要三个服务："),(0,n.Wm)("code",null,"Gitlab"),(0,n.Uk)("，"),(0,n.Wm)("code",null,"PostgreSQL"),(0,n.Uk)("数据库和"),(0,n.Wm)("code",null,"Redis"),(0,n.Uk)("缓存。")],-1),c=(0,n.Wm)("p",null,"如果用命令行直接运行容器，需要三条命令，还要指定很多的配置项。",-1),p=(0,n.Uk)("这里借助"),d={href:"https://docs.docker.com/compose/",target:"_blank",rel:"noopener noreferrer"},m=(0,n.Uk)("docker-compose"),b=(0,n.Uk)("工具来一次运行多个容器。前期配置好相关的容器编排参数，只需要简单的命令行就可以完成GitLab服务的安装和启动。"),u=(0,n.Uk)("根据官方提示，服务器的配置之少是：2Core-CPU 4GB-RAM，并安装了"),g={href:"https://yeasy.gitbooks.io/docker_practice/content/install/",target:"_blank",rel:"noopener noreferrer"},h=(0,n.Uk)("docker"),k=(0,n.Uk)("和"),W={href:"https://yeasy.gitbooks.io/docker_practice/content/compose/install.html",target:"_blank",rel:"noopener noreferrer"},v=(0,n.Uk)("docker-compose"),f=(0,n.Wm)("h2",{id:"镜像",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#镜像","aria-hidden":"true"},"#"),(0,n.Uk)(" 镜像")],-1),U=(0,n.Wm)("ul",null,[(0,n.Wm)("li",null,"源代码仓库： https://github.com/sameersbn/docker-gitlab")],-1),_=(0,n.Uk)("包含三个镜像："),y={href:"https://registry.hub.docker.com/u/sameersbn/redis/",target:"_blank",rel:"noopener noreferrer"},x=(0,n.Uk)("redis"),G=(0,n.Uk)(", "),C={href:"https://hub.docker.com/r/sameersbn/postgresql/",target:"_blank",rel:"noopener noreferrer"},L=(0,n.Uk)("postgresql"),w=(0,n.Uk)(", "),D={href:"https://registry.hub.docker.com/u/sameersbn/gitlab/",target:"_blank",rel:"noopener noreferrer"},S=(0,n.Uk)("gitlab"),q=(0,n.Wm)("h2",{id:"docker-compose-yam-file",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#docker-compose-yam-file","aria-hidden":"true"},"#"),(0,n.Uk)(" Docker Compose Yam File")],-1),E=(0,n.Wm)("p",null,"上面的三个镜像, 如果直接用Docker命令来运行的话，会需要三条命令。并且还要指定很多的参数来指定一些选项的值，比如数据库的用户名或密码。Docker提供了更方便的解决方案：Docker Compose，用一条命令就可以跑起多个容器，最适合这种运行多个容器共同组成一个服务的情景。",-1),B=(0,n.Uk)("Docker Compose接受一个"),I=(0,n.Wm)("code",null,"docker-compose.yml",-1),A=(0,n.Uk)(" 文件作为配置输入。yml文件指定了多个容器怎么启动，彼此之间怎么连接。下面是"),P={href:"https://github.com/sameersbn/docker-gitlab",target:"_blank",rel:"noopener noreferrer"},R=(0,n.Uk)("sameersbn/gitlab"),Z=(0,n.Uk)("这个镜像所提供的Yml文件(https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml) ."),M=(0,n.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 执行下面的命令将文件下载</span>\n<span class="token function">wget</span> https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>下载完成之后，在文件中，我们可以看到 GitLab 的很多配置都已经参数化了，包数据卷的配置、服务的端口、备份时机和邮件配置等。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 或者执行下面的命令将已经改好的文件下载</span>\n<span class="token function">wget</span> -O docker-compose.yml https://gist.githubusercontent.com/curder/0b8a10a827a4f6236bccfddb0d8d5c46/raw/787cb4160caf73993a1d76b8d159c9024a5e3002/gitlab-docker-compose.yml\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在MacOS上，使用<code>/Users/Shared</code>而不是<code>/srv</code>，所以我将其下载下来并将文件内容进行了适当的修改，主要是针对<code>volumn</code>相关的映射路径存储至如下路径。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/Users/Shared/gitlab/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',5),O=(0,n.Uk)("修改后的完整代码可以"),T={href:"https://gist.github.com/curder/0b8a10a827a4f6236bccfddb0d8d5c46",target:"_blank",rel:"noopener noreferrer"},Y=(0,n.Uk)("参考这里"),j=(0,n.Uk)("。"),N=(0,n.uE)('<p>主要修改如下文件内容</p><div class="language-ymal ext-ymal line-numbers-mode"><pre class="language-ymal"><code>- /Users/Shared/gitlab/redis:/var/lib/redis:Z\n- /Users/Shared/gitlab/postgresql:/var/lib/postgresql:Z\n- /Users/Shared/gitlab/gitlab:/home/git/data:Z\n\n- TZ=Asia/Shanghai\n- GITLAB_TIMEZONE=Beijing\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="启动gitlab" tabindex="-1"><a class="header-anchor" href="#启动gitlab" aria-hidden="true">#</a> 启动GitLab</h2><p>修改完 <code>docker-compose.yml</code>，接下来可以利用如下命令来启动 GitLab 了。</p>',4),$=(0,n.Uk)("如果当前网速拉取国外站点镜像缓慢，建议启动之前可以"),z={href:"https://yeasy.gitbooks.io/docker_practice/install/mirror.html",target:"_blank",rel:"noopener noreferrer"},F=(0,n.Uk)("参考这里"),H=(0,n.Uk)("修改docker镜像加速器。"),K=(0,n.Wm)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,n.Wm)("pre",{class:"language-bash"},[(0,n.Wm)("code",null,"docker-compose up -d\n")]),(0,n.Wm)("div",{class:"line-numbers"},[(0,n.Wm)("span",{class:"line-number"},"1"),(0,n.Wm)("br")])],-1),Q=(0,n.Wm)("p",null,"上面的这行命令，首先会下载相关的镜像，然后依次创建并启动容器。如下图所示：",-1),J=(0,n.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>➜  gitlab-docker docker-compose <span class="token function">ps</span>\n           Name                         Command               State                           Ports\n---------------------------------------------------------------------------------------------------------------------------\ngitlab-docker_gitlab_1       /sbin/entrypoint.sh app:start    Up      <span class="token number">0.0</span>.0.0:10022-<span class="token operator">&gt;</span><span class="token number">22</span>/tcp, <span class="token number">443</span>/tcp, <span class="token number">0.0</span>.0.0:10080-<span class="token operator">&gt;</span><span class="token number">80</span>/tcp\ngitlab-docker_postgresql_1   /sbin/entrypoint.sh              Up      <span class="token number">5432</span>/tcp\ngitlab-docker_redis_1        /sbin/entrypoint.sh --logl <span class="token punctuation">..</span>.   Up      <span class="token number">6379</span>/tcp\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>当启动完成之后，我们就可以在浏览器中输入<code>http://localhost:10080</code>，如果暂时能够访问却不能正确打开，那么说明 GitLab 创建还未启动成功。如下图所示：</p>',2),V=(0,n.Wm)("p",null,[(0,n.Uk)("第一次成功进入gitlab需要输入root的初始密码，"),(0,n.Wm)("strong",null,"密码需要保持在8位数以上"),(0,n.Uk)("。")],-1),X=(0,n.uE)('<h2 id="相关命令" tabindex="-1"><a class="header-anchor" href="#相关命令" aria-hidden="true">#</a> 相关命令</h2><h3 id="启动gitlab-1" tabindex="-1"><a class="header-anchor" href="#启动gitlab-1" aria-hidden="true">#</a> 启动GitLab</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker-compose up\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="停止-gitlab" tabindex="-1"><a class="header-anchor" href="#停止-gitlab" aria-hidden="true">#</a> 停止 GitLab</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker-compose stop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="备份-gitlab" tabindex="-1"><a class="header-anchor" href="#备份-gitlab" aria-hidden="true">#</a> 备份 GitLab</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker-compose run gitlab app:rake gitlab:backup:create\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="从备份中还原" tabindex="-1"><a class="header-anchor" href="#从备份中还原" aria-hidden="true">#</a> 从备份中还原</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker-compose run --rm gitlab app:rake gitlab:backup:restore <span class="token assign-left variable">BACKUP</span><span class="token operator">=</span>1529921023_2018_06_25_11.0.0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',9),ee=(0,n.Uk)("在上面的命令中，"),ae=(0,n.Wm)("code",null,"1529921023_2018_06_25_11.0.0",-1),se=(0,n.Uk)(" 为备份文件的时间戳前缀，该文件位于 gitlab 的 "),ne=(0,n.Wm)("code",null,"backups",-1),re=(0,n.Uk)(" 目录中。 更多备份和还原相关操作"),le={href:"https://github.com/sameersbn/docker-gitlab/blob/master/README.md#restoring-backups",target:"_blank",rel:"noopener noreferrer"},oe=(0,n.Uk)("参见文档"),te=(0,n.Uk)("。"),ie=(0,n.Wm)("h2",{id:"参考链接",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#参考链接","aria-hidden":"true"},"#"),(0,n.Uk)(" 参考链接")],-1),ce={href:"http://wuyijun.cn/yong-dockerfang-shi-an-zhuang-gitlabfu-wu/",target:"_blank",rel:"noopener noreferrer"},pe=(0,n.Uk)("用Docker Compose方式安装Gitlab服务"),de={href:"http://beyondvincent.com/2016/09/19/2016-09-17-use-gitlab-with-docker/",target:"_blank",rel:"noopener noreferrer"},me=(0,n.Uk)("在 Docker 中使用 GitLab"),be={render:function(e,a){const s=(0,n.up)("OutboundLink");return(0,n.wg)(),(0,n.j4)(n.HY,null,[r,(0,n.Wm)("p",null,[(0,n.Wm)("a",l,[o,(0,n.Wm)(s)]),t]),i,c,(0,n.Wm)("p",null,[p,(0,n.Wm)("a",d,[m,(0,n.Wm)(s)]),b]),(0,n.Wm)("blockquote",null,[(0,n.Wm)("p",null,[u,(0,n.Wm)("a",g,[h,(0,n.Wm)(s)]),k,(0,n.Wm)("a",W,[v,(0,n.Wm)(s)])])]),f,U,(0,n.Wm)("blockquote",null,[(0,n.Wm)("p",null,[_,(0,n.Wm)("a",y,[x,(0,n.Wm)(s)]),G,(0,n.Wm)("a",C,[L,(0,n.Wm)(s)]),w,(0,n.Wm)("a",D,[S,(0,n.Wm)(s)])])]),q,E,(0,n.Wm)("p",null,[B,I,A,(0,n.Wm)("a",P,[R,(0,n.Wm)(s)]),Z]),M,(0,n.Wm)("p",null,[O,(0,n.Wm)("a",T,[Y,(0,n.Wm)(s)]),j]),N,(0,n.Wm)("blockquote",null,[(0,n.Wm)("p",null,[$,(0,n.Wm)("a",z,[F,(0,n.Wm)(s)]),H])]),K,Q,(0,n.Wm)("img",{src:e.$withBase("/images/tools/docker/installing-gitlab-services-using-docker-compose/docker-compose-gitlab-image.png"),alt:""},null,8,["src"]),J,(0,n.Wm)("img",{src:e.$withBase("/images/tools/docker/installing-gitlab-services-using-docker-compose/docker-compose-gitlab-image-502-error.png"),alt:""},null,8,["src"]),V,(0,n.Wm)("img",{src:e.$withBase("/images/tools/docker/installing-gitlab-services-using-docker-compose/docker-compose-gitlab-image-need-reset-password.png"),alt:""},null,8,["src"]),X,(0,n.Wm)("blockquote",null,[(0,n.Wm)("p",null,[ee,ae,se,ne,re,(0,n.Wm)("a",le,[oe,(0,n.Wm)(s)]),te])]),ie,(0,n.Wm)("ul",null,[(0,n.Wm)("li",null,[(0,n.Wm)("p",null,[(0,n.Wm)("a",ce,[pe,(0,n.Wm)(s)])])]),(0,n.Wm)("li",null,[(0,n.Wm)("p",null,[(0,n.Wm)("a",de,[me,(0,n.Wm)(s)])])])])],64)}}}}]);