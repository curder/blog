(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8024],{6603:(e,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>s});const s={key:"v-785f427b",path:"/tools/sublime/sublime-project-management-project-manager-plugin.html",title:"Sublime插件之ProjectManager项目管理",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"安装",slug:"安装",children:[]},{level:2,title:"新增项目",slug:"新增项目",children:[]},{level:2,title:"查看",slug:"查看",children:[]},{level:2,title:"编辑",slug:"编辑",children:[]},{level:2,title:"删除",slug:"删除",children:[]},{level:2,title:"其他命令",slug:"其他命令",children:[]}],filePathRelative:"tools/sublime/sublime-project-management-project-manager-plugin.md",git:{updatedTime:1629081394e3,contributors:[]}}},7371:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>u});var s=a(6252);const o=(0,s.Wm)("h1",{id:"sublime插件之projectmanager项目管理",tabindex:"-1"},[(0,s.Wm)("a",{class:"header-anchor",href:"#sublime插件之projectmanager项目管理","aria-hidden":"true"},"#"),(0,s.Uk)(" Sublime插件之ProjectManager项目管理")],-1),t=(0,s.Wm)("p",null,"在实际的工作中，会经手N个项目。或许目前正在做着某个项目，但在另一个项目上的一个bug需要紧急修复，这个时候常常做的是关掉sublime编辑器或者使用另外的编辑器打开需要fix bug的项目。",-1),p=(0,s.Uk)("经常这样操作比较繁杂，而且浪费大量时间。 "),c={href:"https://github.com/randy3k/ProjectManager",target:"_blank",rel:"noopener noreferrer"},r=(0,s.Uk)("ProjectManager"),l=(0,s.Uk)("就是解决项目管理的问题。"),d=(0,s.uE)('<h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>用<code>Package Control</code>安装<code>ProjectManager</code>（<code>⌘(Command) + ⇧(Shift) + P</code> –&gt; 输入 <code>Install</code>…打开<code>Package Control</code> -&gt; 输入<code>ProjectManager</code>后回车进入安装）。</p><h2 id="新增项目" tabindex="-1"><a class="header-anchor" href="#新增项目" aria-hidden="true">#</a> 新增项目</h2><p>用<code>Command + Shift + p</code>打开控制面板<code>Package Control</code>后输入<code>Add New Project</code>，在底部弹出的对话框中输入项目名称，默认以当前项目文件夹命名，方便后期查看。</p><h2 id="查看" tabindex="-1"><a class="header-anchor" href="#查看" aria-hidden="true">#</a> 查看</h2><p>用户<code>Command + Shift + p</code>打开控制面板<code>Package Control</code>后输入<code>open Project</code>，或者也可以直接按快捷键<code>Command + Control + p</code>呼出项目列表，然后按回车进行快速切换。</p><p>而且很神奇的是等修改完回来上一个项目打开的文件还原封不动的保存在tab界面。</p><h2 id="编辑" tabindex="-1"><a class="header-anchor" href="#编辑" aria-hidden="true">#</a> 编辑</h2><p>假设针对一个项目不止一个目录的话，比如可能是一些测试代码或者是脚本文件。我们可以通过编辑操作添加其他的目录。</p><p>用户<code>Command + Shift + p</code>打开控制面板<code>Package Control</code>后输入<code>edit project</code>，添加一个关联的路径，比如：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;folders&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/Volumes/Desktop/curder/blog&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/Volumes/Desktop/curder/example&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;folder_exclude_patterns&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token string">&quot;node_modules&quot;</span>\n      <span class="token punctuation">]</span>\n      <span class="token property">&quot;file_exclude_patterns&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        &#39;*.log&#39;\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>此时保存这个配置之后，在左侧的菜单树会展示两个不同的目录，一个是<code>blog</code>，另一个是<code>example</code>目录。</p><p>上面的配置中有一些忽略参数：</p><ul><li><p><code>folder_exclude_patterns</code> 忽略目录的显示</p></li><li><p><code>file_exclude_patterns</code> 忽略文件的显示</p></li></ul><h2 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h2><p>打开命令控制<code>Command + Shift + p</code>输入<code>remove project</code>，可以上下选择待移除的项目，回车确认删除。</p><p>另外也可以使用命令<code>remove dead project</code>来删除文件路径不存在的项目。</p><blockquote><p>删除是一个危险的操作，请保证确定要这样操作，否则有可能再也找不回来。</p></blockquote><h2 id="其他命令" tabindex="-1"><a class="header-anchor" href="#其他命令" aria-hidden="true">#</a> 其他命令</h2><ul><li>重命名项目<code>rename project</code></li></ul>',20),u={render:function(e,n){const a=(0,s.up)("OutboundLink");return(0,s.wg)(),(0,s.j4)(s.HY,null,[o,t,(0,s.Wm)("p",null,[p,(0,s.Wm)("a",c,[r,(0,s.Wm)(a)]),l]),d],64)}}}}]);