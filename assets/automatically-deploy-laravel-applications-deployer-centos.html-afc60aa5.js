import{_ as o,M as l,p as d,q as c,R as n,t as s,N as e,V as p,a1 as i}from"./framework-ff09ffed.js";const r="/blog/assets/deployerimg-29262bc8.png",u={},v=n("h1",{id:"使用deployer自动部署laravel应用程序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用deployer自动部署laravel应用程序","aria-hidden":"true"},"#"),s(" 使用Deployer自动部署Laravel应用程序")],-1),m={href:"https://laravel.com",target:"_blank",rel:"noopener noreferrer"},b={href:"https://deployer.org",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"Laravel",-1),k=n("code",null,"CodeIgniter",-1),g=n("code",null,"Symfony",-1),y=n("code",null,"Zend Framework",-1),f={href:"https://getcomposer.org",target:"_blank",rel:"noopener noreferrer"},_=n("h2",{id:"开始之前",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开始之前","aria-hidden":"true"},"#"),s(" 开始之前")],-1),x=n("p",null,"在开始之前，您需要以下内容：",-1),S=n("li",null,[n("code",null,"Composer"),s("和"),n("code",null,"Git"),s("也安装在本地机器上。例如这里的MacOSX系统。")],-1),w=n("li",null,[s("一个"),n("code",null,"CentOS 7.5.1804"),s("服务器，具有"),n("code",null,"sudo"),s("特权的非root用户。")],-1),q={href:"https://gogs.io",target:"_blank",rel:"noopener noreferrer"},E={href:"https://about.gitlab.com",target:"_blank",rel:"noopener noreferrer"},P={href:"https://bitbucket.org",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"Gogs",-1),R=n("code",null,"GitLab",-1),A=n("code",null,"Bitbucket",-1),D=n("code",null,"GitHub",-1),I=n("strong",null,"$7",-1),G=n("li",null,"指向生产服务器的域名或者通过修改本地host文件解析到对应的服务器域名。",-1),N=i(`<h2 id="设置本地开发环境" tabindex="-1"><a class="header-anchor" href="#设置本地开发环境" aria-hidden="true">#</a> 设置本地开发环境</h2><blockquote><p><strong>此部分在本地开发环境操作</strong>，1. 下载和安装<code>deployer</code> 2. 初始化一个<code>laravel</code>项目 3. 使本地开发环境能够免密提交代码到远程git仓库</p></blockquote><h3 id="下载deployer扩展" tabindex="-1"><a class="header-anchor" href="#下载deployer扩展" aria-hidden="true">#</a> 下载deployer扩展</h3><p>由于从本地机器创建和部署应用程序，因此首先配置本地开发环境。部署者将从本地机器控制整个部署过程，因此请先安装<code>deployer/deployer</code>。</p><p>在<strong>本地机器</strong>上，打开终端并使用下载部署器安装程序<code>composer</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">composer</span> global require deployer/deployer <span class="token parameter variable">-vvv</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完成你应该可以使用以下命令来查看它的版本信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dep <span class="token parameter variable">--version</span>
<span class="token comment"># Deployer master</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建一个laravel项目" tabindex="-1"><a class="header-anchor" href="#创建一个laravel项目" aria-hidden="true">#</a> 创建一个Laravel项目</h3><p>接下来，在<strong>本地机器</strong>上创建一个Laravel项目（假如本地代码放在<code>~/Codes</code>目录下）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/Codes <span class="token operator">&amp;&amp;</span> <span class="token function">composer</span> create-project --prefer-dist laravel/laravel laravel-app <span class="token string">&quot;5.7.*&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在已经在本地计算机上安装了所有必需的扩展包。有了这个，我们将继续为应用程序创建一个Git仓库。</p><h3 id="本地机器连接到远程git仓库" tabindex="-1"><a class="header-anchor" href="#本地机器连接到远程git仓库" aria-hidden="true">#</a> 本地机器连接到远程Git仓库</h3><p>部署旨在使用户能够从任何地方部署代码。为了实现这一功能，它需要用户将代码推送到互联网上的仓库，然后部署人员将代码拷贝到生产服务器。</p><p>我们将使用开源版本控制系统Git来管理Laravel应用程序的源代码。可以使用SSH协议连接到Git服务器，为了安全地执行此操作，需要生成SSH密钥。这比基于密码的身份验证更安全，同时也可以避免在每次部署前输入密码。</p><h4 id="编辑ssh密钥" tabindex="-1"><a class="header-anchor" href="#编辑ssh密钥" aria-hidden="true">#</a> 编辑SSH密钥</h4><p>在本地计算机上运行以下命令以生成SSH密钥。请注意，<code>-f</code>参数指定密钥文件的文件名，并且可以自定义文件名替换<code>gitkey</code>。它会生成一个SSH密钥对（命名<code>gitkey</code>和<code>gitkey.pub</code>）到该<code>~/.ssh/</code>文件夹。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-f</span>  ~/.ssh/gitkey
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>开发者可能在本地计算机上拥有很多的SSH密钥，因此在配置SSH客户端之前了解在连接到Git服务器时使用哪个SSH专用密钥。当然也可以使用之前已经存在的SSH密钥。</p></blockquote><h4 id="创建一个ssh配置文件" tabindex="-1"><a class="header-anchor" href="#创建一个ssh配置文件" aria-hidden="true">#</a> 创建一个SSH配置文件</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> ~/.ssh/config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打开文件并为Git服务器添加一个快捷方式。这应该包含<code>HostName</code>指令（指向Git服务器的主机名）和<code>IdentityFile</code>指令（指向您刚刚创建的SSH密钥的文件路径）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Host mygitserver.com
    HostName mygitserver.com
    IdentityFile ~/.ssh/gitkey
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样配置的话，SSH客户端将知道使用哪个私钥连接到Git服务器。</p><p>使用以下命令显示公钥文件的内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> ~/.ssh/gitkey.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>复制输出并将公钥添加到您的Git服务器。</p><p>如果使用Git托管服务，请参阅有关如何将SSH密钥添加到您的帐户的文档：</p>`,28),T={href:"https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account",target:"_blank",rel:"noopener noreferrer"},M={href:"https://docs.gitlab.com/ee/gitlab-basics/create-your-ssh-keys.html",target:"_blank",rel:"noopener noreferrer"},C={href:"https://confluence.atlassian.com/bitbucket/set-up-an-ssh-key-728138079.html",target:"_blank",rel:"noopener noreferrer"},O={href:"https://gitee.com/help/articles/4181",target:"_blank",rel:"noopener noreferrer"},U=i(`<p>添加完成之后，现在可以使用本地机器连接到Git服务器。使用以下命令测试连接</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@mygitserver.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果此命令导致错误，请检查是否通过引用Git托管服务的文档正确添加了SSH密钥，然后再次尝试连接。</p><p>在将应用程序推送到远程Git存储库并进行部署之前，我们先配置生产服务器。</p><h2 id="配置生产服务器" tabindex="-1"><a class="header-anchor" href="#配置生产服务器" aria-hidden="true">#</a> 配置生产服务器</h2><blockquote><p>此部分在目标服务器即<strong>生产服务器</strong>上操作 1. 创建一个用于部署的部署用户deployer 2. 授权部署用户的相关操作 3. 配置生产环境能够免密拉取远程git仓库代码</p></blockquote><h3 id="配置部署者用户" tabindex="-1"><a class="header-anchor" href="#配置部署者用户" aria-hidden="true">#</a> 配置部署者用户</h3><p>部署者使用SSH协议在服务器上安全地执行命令。出于这个原因，在生产服务器创建一个用户<code>deployer</code>，Deployer可以使用该用户通过SSH登录并在您的服务器上执行命令。 使用sudo非root用户登录到生产服务器，并使用以下命令创建一个名为<code>deployer</code>的新用户：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">unzip</span> <span class="token function">git</span>
<span class="token function">sudo</span> adduser deployer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>创建一个<code>deployer</code>部署用户，上面的命令按回车后输入用户密码和重复密码后直接按回车即可。</p></blockquote><p>Laravel需要一些可写的目录来存储缓存的文件和上传文件，因此部署者用户创建的目录必须可由Nginx Web服务器写入。使用下面的命令将用户添加到<code>nginx</code>组中以执行此操作：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-aG</span> nginx deployer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Nginx服务器的用户组是<code>nginx</code>，根据当前环境进行替换。</p></blockquote><p>假设将应用程序存储在<code>/var/www/html/</code>目录中，因此将目录的所有权更改为部署者用户和<code>nginx</code>组。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /var/www/html <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">chown</span> deployer:nginx /var/www/html <span class="token comment"># 最后这里不要加斜线哦</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该<strong>部署</strong>的用户需要能够修改文件和文件夹<code>/var/www/html</code>目录。因此目录中创建的所有新文件和子目录<code>/var/www/html</code>都应该继承该文件夹的组标识（nginx）。要实现这个目标，请使用以下命令在此目录中设置组ID：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">chmod</span> g+s /var/www/html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>部署者</strong>将使用SSH将Git repo克隆到生产服务器，因此您要确保生产服务器和Git服务器之间的连接是安全的。这里将使用与用于本地计算机的相同方法，并为部署者用户生成一个SSH密钥。</p><h3 id="项目git仓库授权生产服务器访问" tabindex="-1"><a class="header-anchor" href="#项目git仓库授权生产服务器访问" aria-hidden="true">#</a> 项目git仓库授权生产服务器访问</h3><p>切换到服务器上的<strong>部署者deployer</strong>用户：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">su</span> - deployer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>特别注意：</strong> 切换用户之前请使用<code>sudo su -</code>切换到<code>root</code>用户。</p></blockquote><p>接下来，生成一个SSH密钥对作为<strong>部署者</strong>用户。这一次，可以接受SSH密钥的默认文件名：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>输入完命令后一直按Enter即可。</p></blockquote><p>使用下面的命令显示公钥：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> ~/.ssh/id_rsa.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>像上一步那样复制本地公钥文件一样并将其添加到Git服务器，现在服务器就可以从git仓库clone代码了。</p><p>此时，可以在服务器使用<code>deployer</code>用户使用 <code>git clone</code>命令拷贝git仓库测试。如果不能成功拷贝仓库代码，请检查服务器的公钥是否正确完全的复制与粘贴正确，不正确的话再次重复复制粘贴即可。</p><h2 id="开发环境免密码登录生产环境" tabindex="-1"><a class="header-anchor" href="#开发环境免密码登录生产环境" aria-hidden="true">#</a> 开发环境免密码登录生产环境</h2><h3 id="开发环境生成密匙" tabindex="-1"><a class="header-anchor" href="#开发环境生成密匙" aria-hidden="true">#</a> 开发环境生成密匙</h3><blockquote><p><strong>此部分在本地开发环境操作</strong> 1. 设置本地开发环境能够免密登录生产环境</p></blockquote><p>在<strong>本地开发机器</strong>上运行以下命令。随意用自定义文件名替换<code>deployerkey</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-f</span>  ~/.ssh/deployerkey
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>复制包含公钥的以下命令的输出：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> ~/.ssh/deployerkey.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="修改开发环境文件内容" tabindex="-1"><a class="header-anchor" href="#修改开发环境文件内容" aria-hidden="true">#</a> 修改开发环境文件内容</h3><blockquote><p><strong>此部分在生产环境操作</strong> 生产环境修改<code>~/.ssh/authorized_keys</code>内容和权限</p></blockquote><p>将上面复制的公钥内容，添加到生产服务器上的<code>~/.ssh/authorized_keys</code>文件内。</p><blockquote><p>注意在生产服务器上，使用<strong>部署者</strong>用户<code>deployer</code>修改上面的文件内容。</p></blockquote><p>修改完成后，使用下面的命令修改文件权限：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chmod</span> <span class="token number">600</span> ~/.ssh/authorized_keys
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用部署用户测试" tabindex="-1"><a class="header-anchor" href="#使用部署用户测试" aria-hidden="true">#</a> 使用部署用户测试</h3><p>作为<strong>部署者</strong>用户，从本地计算机登录到服务器以测试连接：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> deployer@your_server_ip <span class="token parameter variable">-i</span> ~/.ssh/deployerkey
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以部署者身份登录后，测试线上服务器和Git服务器之间的连接是否OK：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@mygitserver.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="配置nginx" tabindex="-1"><a class="header-anchor" href="#配置nginx" aria-hidden="true">#</a> 配置Nginx</h2><blockquote><p>以下配置在<strong>生产服务器</strong>配置。</p></blockquote><h3 id="创建一个站点配置文件" tabindex="-1"><a class="header-anchor" href="#创建一个站点配置文件" aria-hidden="true">#</a> 创建一个站点配置文件</h3><p>以<code>sudo</code>用户身份登录到服务器并创建一个新的配置文件。将配置中的域名<code>example.com</code>替换为你当前操作的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vi</span> /etc/nginx/conf.d/example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>大致内容如下：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">listen</span> [::]:80</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">root</span> /var/www/html/laravel-app/current/public</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">index</span> index.php index.html index.htm index.nginx-debian.html</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">server_name</span> example.com www.example.com</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.php?<span class="token variable">$query_string</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token directive"><span class="token keyword">location</span> ~ \\.php$</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> =404</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">fastcgi_index</span> index.php</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">fastcgi_param</span> SCRIPT_FILENAME <span class="token variable">$realpath_root</span><span class="token variable">$fastcgi_script_name</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">fastcgi_pass</span> unix:/run/php-fpm/php-fpm.sock</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">include</span> fastcgi_params</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token directive"><span class="token keyword">location</span> ~ /\\.ht</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">deny</span> all</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试配置语法" tabindex="-1"><a class="header-anchor" href="#测试配置语法" aria-hidden="true">#</a> 测试配置语法</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> nginx <span class="token parameter variable">-t</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果您看到任何错误，请返回并重新检查配置文件，然后再继续。</p><h3 id="重新启动nginx" tabindex="-1"><a class="header-anchor" href="#重新启动nginx" aria-hidden="true">#</a> 重新启动Nginx</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl restart nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在配置Nginx服务器。接下来，我们将配置应用程序的MySQL数据库。</p><h2 id="配置mysql" tabindex="-1"><a class="header-anchor" href="#配置mysql" aria-hidden="true">#</a> 配置MySQL</h2><blockquote><p>以下配置在<strong>生产服务器</strong>配置。</p></blockquote><p>以root身份登录到MySQL控制台：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这会提示你输入root密码，正确输入root密码后。接下来，为应用程序创建一个新的数据库：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span>
<span class="token keyword">DATABASE</span> laravel_app <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，创建一个新的数据库用户。这里演示使用用户名：<code>laravel_user</code>和密码：<code>MyNewPassword1!</code>，但实际情况应该使用强密码。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span>
<span class="token keyword">USER</span> <span class="token string">&#39;laravel_user&#39;</span><span class="token variable">@&#39;localhost&#39;</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;MyNewPassword1!&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>授予用户数据库权限：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">GRANT</span>
<span class="token keyword">ALL</span>
<span class="token keyword">ON</span> laravel_app<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">&#39;laravel_user&#39;</span><span class="token variable">@&#39;localhost&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，重新加载权限：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>FLUSH PRIVILEGES;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，<code>exit</code>退出MySQL控制台。</p><h2 id="部署应用程序" tabindex="-1"><a class="header-anchor" href="#部署应用程序" aria-hidden="true">#</a> 部署应用程序</h2><h3 id="配置deployer" tabindex="-1"><a class="header-anchor" href="#配置deployer" aria-hidden="true">#</a> 配置deployer</h3><p>到目前为止，已经配置了<strong>部署者</strong>运行所需的所有工具和程序。在运行第一个部署之前，剩下的工作就是完成Laravel应用程序和Deployer本身的配置，并初始化并将项目代码推送到远程Git存储库。</p><p>打开<strong>本地开发机器</strong>上的终端，并使用以下命令将工作目录更改为应用程序的文件夹：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/Codes/laravel-app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在该目录中运行以下命令，该命令将创建在项目根目录<code>laravel-app</code>下创建一个<code>deploy.php</code>文件，该文件将包含配置信息和部署任务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dep init <span class="token parameter variable">-t</span> Laravel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，在文本编辑器或IDE打开<code>deploy.php</code>文件。第三行包含一个PHP脚本，其中包含部署Laravel应用程序所需的任务和配置：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">namespace</span> <span class="token package">Deployer</span><span class="token punctuation">;</span>

<span class="token keyword">require</span> <span class="token string single-quoted-string">&#39;recipe/laravel.php&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// Project name</span>
<span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;application&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;laravel-app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Timeout</span>
<span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;default_timeout&#39;</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Project repository</span>
<span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;repository&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;git@gogs.curder.com:curder/laravel-app.git&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// [Optional] Allocate tty for git clone. Default value is false.</span>
<span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;git_tty&#39;</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Shared files/dirs between deploys</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;shared_files&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;shared_dirs&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Writable dirs by web server</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;writable_dirs&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// customize config</span>
<span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ssh_multiplexing&#39;</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;allow_anonymous_stats&#39;</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;keep_releases&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 保存所有部署版本</span>


<span class="token comment">// Hosts</span>
<span class="token function">host</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;server_ip&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 填写生产服务器IP地址</span>
    <span class="token operator">-&gt;</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;deployer&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 填写生产服务器部署用户名</span>
    <span class="token operator">-&gt;</span><span class="token function">identityFile</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;~/.ssh/deployerkey&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 秘钥文件，跟配置免密登录时的设置保存的名称一致</span>
    <span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;deploy_path&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;/var/www/html/laravel-app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Tasks</span>
<span class="token function">task</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;build&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;cd {{release_path}} &amp;&amp; build&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 自定义任务：重置 PHP-FPM 进程</span>
<span class="token comment">// desc(&#39;Restart PHP-FPM service&#39;);</span>
<span class="token comment">// task(&#39;php-fpm:reload&#39;, function () {</span>
<span class="token comment">//    // The user must have rights for reload service</span>
<span class="token comment">//    // /etc/sudoers: deployer ALL=NOPASSWD:/bin/systemctl reload php7.1-fpm.service</span>
<span class="token comment">//    run(&#39;sudo systemctl reload php7.1-fpm.service&#39;);</span>
<span class="token comment">//});</span>

<span class="token comment">// [Optional] if deploy fails automatically unlock.</span>
<span class="token function">after</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;deploy:failed&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;deploy:unlock&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Migrate database before symlink new release.</span>
<span class="token comment">// before(&#39;deploy:symlink&#39;, &#39;artisan:migrate&#39;);</span>
<span class="token comment">// 部署成功后重置 PHP-FPM 缓存</span>
<span class="token comment">// after(&#39;deploy:symlink&#39;, &#39;php-fpm:reload&#39;);</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>修改上面的 <code>servier_ip</code></p></blockquote>`,83),B={href:"https://deployer.org/docs",target:"_blank",rel:"noopener noreferrer"},F=i(`<p>接下来，注释掉文件相关行<code>before(&#39;deploy:symlink&#39;, &#39;artisan:migrate&#39;);</code> 。此行指示部署者自动运行数据库迁移，并通过注释将其禁用。如果不注释它，部署将失败，因为此行需要在服务器上提供项目的数据库配置，只能使用在首次部署期间生成的文件之后来添加该行。</p><h3 id="提交项目代码到git" tabindex="-1"><a class="header-anchor" href="#提交项目代码到git" aria-hidden="true">#</a> 提交项目代码到git</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/Code/laravel-app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在<code>laravel-app</code>目录中运行以下命令以初始化项目文件夹中的Git存储库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，将所有项目文件添加到存储库中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>提交更改</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;Initial commit for first deployment.&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用以下命令将您的Git服务器添加到本地存储库。请确保使用您自己的远程存储库的<strong>URL</strong>替换命令中的地址：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> origin git@mygitserver.com:username/repository.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将更改推送到远程Git存储库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用以下dep命令运行部署" tabindex="-1"><a class="header-anchor" href="#使用以下dep命令运行部署" aria-hidden="true">#</a> 使用以下<code>dep</code>命令运行部署</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dep deploy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>需要查看部署输出的详情可以使用 <code>-vvv</code>参数。</p></blockquote><p>如果一切顺利，你应该Successfully deployed!在最后看到这样的输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Deployer&#39;s output
✈︎ Deploying master on your_server_ip
✔ Executing task deploy:prepare
✔ Executing task deploy:lock
✔ Executing task deploy:release
➤ Executing task deploy:update_code
✔ Ok
✔ Executing task deploy:shared
✔ Executing task deploy:vendors
✔ Executing task deploy:writable
✔ Executing task artisan:storage:link
✔ Executing task artisan:view:clear
✔ Executing task artisan:cache:clear
✔ Executing task artisan:config:cache
✔ Executing task artisan:optimize
✔ Executing task deploy:symlink
✔ Executing task deploy:unlock
✔ Executing task cleanup
Successfully deployed!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下结构将在目录内的服务器上创建：<code>/var/www/html/laravel-app</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├── .dep
├── current -&gt; releases/1
├── releases
│   └── 1
└── shared
    ├── .env
    └── storage
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是每个文件和目录包含的内容：</p><ul><li>该<code>releases</code>目录包含Laravel应用程序的部署版本。</li><li><code>current</code> 是最后一个版本的符号链接。</li><li>该<code>.dep</code>目录包含Deployer的特殊元数据。</li><li>该<code>shared</code>目录包含<code>.env</code>配置文件和<code>storage</code>将被链接到每个版本的目录。</li></ul><h3 id="登录服务器" tabindex="-1"><a class="header-anchor" href="#登录服务器" aria-hidden="true">#</a> 登录服务器</h3><h4 id="查看项目目录" tabindex="-1"><a class="header-anchor" href="#查看项目目录" aria-hidden="true">#</a> 查看项目目录</h4><p>通过在<strong>生产服务器</strong>上运行以下命令来验证该文件，该命令将列出文件夹中的文件和目录：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ls</span> /var/www/html/laravel-app

<span class="token comment"># Output</span>
current  .dep  releases  shared
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，该应用程序无法工作，因为该<code>.env</code>文件是空的。该文件用于保存重要配置，如应用程序密钥<code>APP_KEY</code>用于加密的随机字符串。如果未设置，您的用户会话和其他加密数据将不安全。</p><p>该应用程序<code>.env</code>在本地计算机上有一个文件，但Laravel的<code>.gitignore</code>文件将其从Git中排除，因为将密码等敏感数据存储在Git存储库中并不是一个最佳实践，而且该应用程序在您的服务器上需要不同的设置。</p><p>另外该<code>.env</code>文件也包含数据库连接设置，这就是为什么我们禁用第一次部署的数据库迁移的原因。</p><h4 id="配置项目环境变量" tabindex="-1"><a class="header-anchor" href="#配置项目环境变量" aria-hidden="true">#</a> 配置项目环境变量</h4><p>使用下面的命令，从开发机器上以<strong>部署者用户</strong>身份登录到您的服务器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> deployer@your_server_ip  <span class="token parameter variable">-i</span> ~/.ssh/deployerkey
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在生产服务器上修改<code>.env</code>环境配置文件<code>vim /var/www/html/laravel-app/shared/.env</code>内容：</p><div class="language-dotenv line-numbers-mode" data-ext="dotenv"><pre class="language-dotenv"><code>APP_NAME=laravel-app
APP_ENV=production
APP_KEY=base64:SXYMVQIW2hyl8lc+x0UZw5fxMNoEv0fPzhten9lBjUQ=
APP_DEBUG=false
APP_URL=http://example.com

LOG_CHANNEL=stack

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laravel_app
DB_USERNAME=laravel_user
DB_PASSWORD=&quot;MyNewPassword1!&quot;

BROADCAST_DRIVER=log
CACHE_DRIVER=file
SESSION_DRIVER=file
SESSION_LIFETIME=120
QUEUE_DRIVER=sync

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_DRIVER=smtp
MAIL_HOST=smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_APP_CLUSTER=mt1

MIX_PUSHER_APP_KEY=&quot;\${PUSHER_APP_KEY}&quot;
MIX_PUSHER_APP_CLUSTER=&quot;\${PUSHER_APP_CLUSTER}&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存该文件并关闭编辑器。</p><p>现在取消注释<code>deploy.php</code>本地机器上文件中关于<code>before(&#39;deploy:symlink&#39;, &#39;artisan:migrate&#39;);</code>：</p><blockquote><p>这个操作会导致数据库迁移在每个部署中自动运行。这样可以避免手动迁移数据库，但在部署之前不要忘记备份数据库。</p></blockquote><p>要检查此配置是否正常，请再次部署该应用程序。在<strong>本地开发机器</strong>上运行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dep deploy <span class="token parameter variable">-vvv</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在，您的应用程序将正常工作。如果您访问服务器的域名（<code>http://example.com</code>），您将看到以下登录页面：</p><p><img src="`+r+`" alt=""></p><p>当配置完上面的配置之后，每次开发场景不需要如此复杂的操作。</p><blockquote><p>有时候部署完成后访问域名会出现 <strong>403 Forbidden</strong> 的情况，此时，检查机器的SELinux是否禁用，如果没有禁用可能会导致文件无权访问。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>setenforce <span class="token number">0</span>
<span class="token function">cp</span> /etc/sysconfig/selinux /etc/sysconfig/selinux.bak<span class="token variable"><span class="token variable">\`</span><span class="token function">date</span> +%F<span class="token variable">\`</span></span> <span class="token operator">&amp;&amp;</span> <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/SELINUX=enforcing/SELINUX=disabled/g&#39;</span> /etc/sysconfig/selinux
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="运行典型部署" tabindex="-1"><a class="header-anchor" href="#运行典型部署" aria-hidden="true">#</a> 运行典型部署</h2><p>在再次部署之前，通过修改应用程序开始。例如，您可以在<code>routes/web.php</code>文件中添加新的<code>about</code>路由：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;welcome&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/about&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;About Page&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存文件并提交这些更改：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-am</span> <span class="token string">&#39;Your commit message.&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将更改推送到远程Git存储库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>部署应用程序</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dep deploy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h2>`,53),V=n("strong",null,"部署者",-1),$={href:"https://deployer.org/docs/tasks",target:"_blank",rel:"noopener noreferrer"},W=n("h2",{id:"参考链接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考链接","aria-hidden":"true"},"#"),s(" 参考链接")],-1),Y={href:"https://www.digitalocean.com/community/tutorials/automatically-deploy-laravel-applications-deployer-ubuntu#conclusion",target:"_blank",rel:"noopener noreferrer"},j={href:"https://laravel-china.org/articles/13242/another-introduction-to-the-use-of-deployer",target:"_blank",rel:"noopener noreferrer"},z={href:"https://juejin.im/entry/5afd3dd051882542821c87d3",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://juejin.im/entry/58fd79d961ff4b00666c2e95",target:"_blank",rel:"noopener noreferrer"};function K(X,Z){const a=l("ExternalLinkIcon"),t=l("RouterLink");return d(),c("div",null,[v,n("p",null,[n("a",m,[s("Laravel"),e(a)]),s("是一个开放源代码的PHP Web框架，旨在简化认证，路由和缓存等常见Web开发任务。"),n("a",b,[s("Deployer"),e(a)]),s(" 是一款开源的PHP部署工具，它为许多流行的框架提供了开箱即用的支持，包括"),h,s("，"),k,s("，"),g,s("和"),y,s("等等。")]),n("p",null,[s("部署者通过将应用程序从Git存储库克隆到服务器，安装与"),n("a",f,[s("Composer"),e(a)]),s(" 的依赖关系以及配置应用程序来自动执行部署，因此您不必手动执行此操作。这使开发者可以将更多时间花在开发上，而不是上传和配置，并允许开发者更频繁地进行部署。")]),_,x,n("ul",null,[S,w,n("li",null,[s("按照"),e(t,{to:"/os/centos/centos7/centos-7-lnmp-installation-and-configuration.html"},{default:p(()=>[s("CentOS7下LNMP安装配置")]),_:1}),s("配置好的LNMP环境。")]),n("li",null,[s("一个Git服务器。可以选择使用"),n("a",q,[s("Gogs"),e(a)]),s("、"),n("a",E,[s("GitLab"),e(a)]),s("，"),n("a",P,[s("Bitbucket"),e(a)]),s(" 或"),n("a",L,[s("GitHub"),e(a)]),s("等服务。"),H,s("、"),R,s("和"),A,s("免费提供私人仓库，而"),D,s("提供私人仓库，每月 "),I,s(" 起。")]),G]),N,n("ul",null,[n("li",null,[n("a",T,[s("将SSH密钥添加到GitHub"),e(a)])]),n("li",null,[n("a",M,[s("将SSH密钥添加到GitLab"),e(a)])]),n("li",null,[n("a",C,[s("将SSH密钥添加到Bitbucket"),e(a)])]),n("li",null,[n("a",O,[s("生成/添加SSH公钥"),e(a)])])]),U,n("p",null,[s("相关的指令详见"),n("a",B,[s("官方文档"),e(a)])]),F,n("p",null,[s("通过配置本地开发机器和生成环境服务器，以零宕机时间轻松部署Laravel应用程序。"),V,s("还可以一次部署到更多服务器并创建任务; 例如，可以指定一个任务来在迁移之前备份数据库。如果想了解关于部署者功能的更多信息，可以在** 部署者**"),n("a",$,[s("文档"),e(a)]),s("中找到更多信息。")]),W,n("ul",null,[n("li",null,[n("p",null,[n("a",Y,[s("如何在Ubuntu 16.04上使用Deployer自动部署Laravel应用程序"),e(a)])])]),n("li",null,[n("p",null,[n("a",j,[s("又一篇 Deployer 的使用攻略"),e(a)])])]),n("li",null,[n("p",null,[n("a",z,[s("deployer 实战经验分享"),e(a)])])]),n("li",null,[n("p",null,[n("a",Q,[s("少年，是时候换种更优雅的方式部署你的 php 代码了"),e(a)])])])])])}const nn=o(u,[["render",K],["__file","automatically-deploy-laravel-applications-deployer-centos.html.vue"]]);export{nn as default};
