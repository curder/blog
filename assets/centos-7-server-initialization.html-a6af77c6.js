import{_ as t,M as o,p as d,q as c,R as e,t as s,N as a,a1 as i}from"./framework-fb0bc66b.js";const l={},r=i(`<h1 id="centos-7-服务器初始化" tabindex="-1"><a class="header-anchor" href="#centos-7-服务器初始化" aria-hidden="true">#</a> Centos 7 服务器初始化</h1><p>当初次创建新服务器时，应该尽早完成一些配置步骤，作为基本设置的一部分，这将增加服务器的安全性和可用性，并为后续操作奠定坚实的基础。</p><h2 id="登录服务器" tabindex="-1"><a class="header-anchor" href="#登录服务器" aria-hidden="true">#</a> 登录服务器</h2><p>如果要登录到服务器，需要知道服务器的 <strong>公共IP地址</strong> 和 <strong>root</strong> 帐户的密码。</p><p>可以通过下面的命令登录到服务器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> root@SERVER_IP_ADDRESS
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后提供认证凭证，可以选择使用密码或私钥，完成登录过程。</p><h2 id="设置个性化主机名" tabindex="-1"><a class="header-anchor" href="#设置个性化主机名" aria-hidden="true">#</a> 设置个性化主机名</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> hostnamectl set-hostname YOUR_HOSTNAME
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="终端配色" tabindex="-1"><a class="header-anchor" href="#终端配色" aria-hidden="true">#</a> 终端配色</h2><p>为了设置终端颜色，需要对<code>/etc/bashrc</code>文件中的 <strong>PS1</strong> 变量进行定制，这样就能应用于所有用户。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;# 终端配色
export PS1=&#39;<span class="token entity" title="\\n">\\n</span>\\[<span class="token entity" title="\\e">\\e</span>[37;1m[\\]\\[<span class="token entity" title="\\e">\\e</span>[31;1m\\]\\u\\[<span class="token entity" title="\\e">\\e</span>[39;1m\\]@\\[<span class="token entity" title="\\e">\\e</span>[33;1m\\]\\H \\[<span class="token entity" title="\\e">\\e</span>[34;1m\\]\\w\\[<span class="token entity" title="\\e">\\e</span>[37;1m\\]]<span class="token entity" title="\\n">\\n</span>\\[<span class="token entity" title="\\e">\\e</span>[32;1m\\]<span class="token entity" title="\\\\">\\\\</span>$ \\[<span class="token entity" title="\\e">\\e</span>[0m\\]&#39;&quot;</span> <span class="token operator">&gt;&gt;</span> /etc/bashrc

<span class="token builtin class-name">source</span> /etc/bashrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="更新阿里云源" tabindex="-1"><a class="header-anchor" href="#更新阿里云源" aria-hidden="true">#</a> 更新阿里云源</h2><blockquote><p>注意：如果服务器在国内建议修改 yum 源为 aliyun，如果服务器在国外可以忽略。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup
<span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-o</span> /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
<span class="token function">sudo</span> yum makecache
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),p={href:"https://opsx.alibaba.com/mirror",target:"_blank",rel:"noopener noreferrer"},u=i(`<h2 id="添加必要系统工具" tabindex="-1"><a class="header-anchor" href="#添加必要系统工具" aria-hidden="true">#</a> 添加必要系统工具</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token punctuation">\\</span>
    yum-utils <span class="token punctuation">\\</span>
    net-tools <span class="token punctuation">\\</span>
    net-snmp <span class="token punctuation">\\</span>
    tree <span class="token punctuation">\\</span>
    <span class="token function">wget</span> <span class="token punctuation">\\</span>
    <span class="token function">curl</span> <span class="token punctuation">\\</span>
    iftop <span class="token punctuation">\\</span>
    <span class="token function">htop</span> <span class="token punctuation">\\</span>
    telnet <span class="token punctuation">\\</span>
    <span class="token function">git</span> <span class="token punctuation">\\</span>
    <span class="token function">vim</span> <span class="token punctuation">\\</span>
    <span class="token function">zip</span> <span class="token punctuation">\\</span>
    <span class="token function">unzip</span> <span class="token punctuation">\\</span>
    ntpdate <span class="token punctuation">\\</span>
    mlocate

<span class="token comment"># 检查安装情况</span>
<span class="token function">sudo</span> <span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">&quot;snmp|wget|iftop|htop|git|telnet|vim|zip|unzip|curl|ntpdate|mlocate&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="修改时区-设置时间" tabindex="-1"><a class="header-anchor" href="#修改时区-设置时间" aria-hidden="true">#</a> 修改时区&amp;&amp;设置时间</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> timedatectl set-timezone Asia/Shanghai
<span class="token function">sudo</span> ntpdate cn.pool.ntp.org
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意：</strong> 执行下面的命令前，需要将当前操作的用户切换为 <code>root</code>，否则会提示没有权限。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;00 */10 * * * ntpdate cn.pool.ntp.org &gt;/dev/null 2&gt;&amp;1&quot;</span> <span class="token operator">&gt;&gt;</span> /var/spool/cron/root
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="内核优化sysctl-conf-和-调整文件描述符ulimit" tabindex="-1"><a class="header-anchor" href="#内核优化sysctl-conf-和-调整文件描述符ulimit" aria-hidden="true">#</a> 内核优化<code>sysctl.conf</code> 和 调整文件描述符<code>ulimit</code></h2><p>修改网络相关配置，包括网络连接数等。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;net.ipv4.ip_local_port_range = 1024 65535
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.ipv4.tcp_rmem = 4096 87380 16777216
net.ipv4.tcp_wmem = 4096 65536 16777216
net.ipv4.tcp_fin_timeout = 10
net.ipv4.tcp_tw_recycle = 1
net.ipv4.tcp_timestamps = 0
net.ipv4.tcp_window_scaling = 0
net.ipv4.tcp_sack = 0
net.core.netdev_max_backlog = 65535
net.ipv4.tcp_no_metrics_save = 1
net.core.somaxconn = 65535
net.ipv4.tcp_syncookies = 0
net.ipv4.tcp_max_orphans = 262144
net.ipv4.tcp_max_syn_backlog = 262144
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_syn_retries = 2&quot;</span> <span class="token operator">&gt;</span> /etc/sysctl.conf

<span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.ipv4.route.flush</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;ulimit -HSn 65536&quot;</span> <span class="token operator">&gt;&gt;</span> /etc/rc.local
<span class="token builtin class-name">echo</span> <span class="token string">&quot;ulimit -HSn 65536&quot;</span> <span class="token operator">&gt;&gt;</span> /root/.bash_profile
<span class="token builtin class-name">ulimit</span> <span class="token parameter variable">-HSn</span> <span class="token number">65535</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关闭-selinux" tabindex="-1"><a class="header-anchor" href="#关闭-selinux" aria-hidden="true">#</a> 关闭 SELinux</h2><p>一般情况下如果使用云主机会提供一个安全组配置，所以我们选择将 SELinux 关闭。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>setenforce <span class="token number">0</span>
<span class="token function">cp</span> /etc/sysconfig/selinux /etc/sysconfig/selinux.bak<span class="token variable"><span class="token variable">\`</span><span class="token function">date</span> +%F<span class="token variable">\`</span></span> <span class="token operator">&amp;&amp;</span> <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/SELINUX=enforcing/SELINUX=disabled/g&#39;</span> /etc/sysconfig/selinux
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="添加一个新用户" tabindex="-1"><a class="header-anchor" href="#添加一个新用户" aria-hidden="true">#</a> 添加一个新用户</h2><p>添加一个新用户，用户名为 <code>demo</code> 并添加密码 <code>newPassword</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> adduser demo <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;newPassword&quot;</span> <span class="token operator">|</span> <span class="token function">passwd</span> <span class="token parameter variable">--stdin</span> <span class="token string">&quot;demo&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="添加用户权限" tabindex="-1"><a class="header-anchor" href="#添加用户权限" aria-hidden="true">#</a> 添加用户权限</h2><p>已经拥有一个常规帐户权限的新用户 <code>demo</code> 账号，但是可能需要使用该账号执行管理任务。</p><p>为了避免必须从普通用户<code>demo</code>注销并以<code>root</code>帐户重新登录，可以为普通帐户设置所谓的 &quot;超级用户&quot; 或 root 权限。</p><p>将允许普通用户通过<code>sudo</code>在每个命令之前的关键字来运行具有管理特权的命令。</p><p>默认情况下，在CentOS 7上，属于 <code>wheel</code> 组的用户可以使用该 sudo 命令，将<code>demo</code>用户加入到<code>wheel</code>组。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> gpasswd <span class="token parameter variable">-a</span> demo wheel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个时候可以使用 demo 用户登录到服务器，并且通过命令 <code>sudo su -</code> 然后输入 demo 用户的密码来切换到 root 用户。</p><h2 id="添加公钥认证-推荐" tabindex="-1"><a class="header-anchor" href="#添加公钥认证-推荐" aria-hidden="true">#</a> 添加公钥认证（推荐）</h2><blockquote><p>除非特殊说明，否则所有的操作都在本地，而非服务器上进行的操作。</p></blockquote><p>为新用户设置公钥认证。设置此项将通过必须使用专用的 SSH 密钥登录来提高服务器的安全性。</p><p>如果本地尚未拥有包含公钥和私钥的 SSH 密钥对，则需要生成一个。如果已经存在要使用的密钥，忽略下面的操作，跳至复制公钥关键步骤。</p><h3 id="生成密钥对" tabindex="-1"><a class="header-anchor" href="#生成密钥对" aria-hidden="true">#</a> 生成密钥对</h3><p>要生成新的密钥对，请在本地机器（非服务器本身）的终端输入以下命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-keygen
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>假设本机用户被称为<code>curder</code>，执行上面的命令将看到如下所示的输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Generating public/private rsa key pair.
Enter file in which to save the key (/Users/curder/.ssh/id_rsa):
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>继续回车的话，系统会提示输入密码以确保密钥的安全。<strong>建议将密码留空。</strong></p><p>执行完上面的操作后，会在<code>curder</code>的家目录的<code>.ssh</code>目录中生成一个私钥<code>id_rsa</code>和一个公钥<code>id_rsa.pub</code>。 <strong>请记住，私钥不应与任何不应访问服务器的人共享!</strong></p><h3 id="复制公钥" tabindex="-1"><a class="header-anchor" href="#复制公钥" aria-hidden="true">#</a> 复制公钥</h3><p>生成SSH密钥对后，会需要将公钥复制到新的服务器上。这里介绍两种简单的方法来做到这一点。</p><h4 id="方法1-使用ssh-copy-id" tabindex="-1"><a class="header-anchor" href="#方法1-使用ssh-copy-id" aria-hidden="true">#</a> 方法1：使用<code>ssh-copy-id</code></h4><p>如果在本地计算机安装了<code>ssh-copy-id</code>脚本，则可以使用它将公钥安装到您拥有登录凭据的任何用户。 <code>ssh-copy-id</code>通过指定要安装密钥的服务器的用户和IP地址运行脚本，如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-copy-id demo@SERVER_IP_ADDRESS
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在提示处提供密码并成功后，本地公钥将被添加到远程服务器的<code>.ssh/authorized_keys</code>文件中，并可以使用相应的私钥登录到服务器。</p><h4 id="方法2-手动安装密钥" tabindex="-1"><a class="header-anchor" href="#方法2-手动安装密钥" aria-hidden="true">#</a> 方法2：手动安装密钥</h4><h5 id="使用命令获取公钥" tabindex="-1"><a class="header-anchor" href="#使用命令获取公钥" aria-hidden="true">#</a> 使用命令获取公钥</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> ~/.ssh/id_rsa.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将打印在屏幕上的公钥复制到剪切板，或者使用<code>pbcopy &lt; ~/.ssh/id_rsa.pub</code>命令将公钥直接复制到剪切板。</p><h5 id="将公钥添加到新的远程用户" tabindex="-1"><a class="header-anchor" href="#将公钥添加到新的远程用户" aria-hidden="true">#</a> 将公钥添加到新的远程用户</h5><p>要允许使用SSH密钥作为新的远程用户进行身份验证，必须将公钥添加到<strong>服务器上</strong>用户主目录中的 <code>~/.ssh/authorized_keys</code> 文件中。</p><p><strong>在服务器上</strong>，以 <code>root</code> 用户身份输入以下命令切换到新用户</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">su</span> - demo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>.ssh</code>使用以下命令创建一个新目录，并限制其权限。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> .ssh <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> <span class="token number">700</span> .ssh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来需要使用文本编辑器打开一个名为<code>~/.ssh/authorized_keys</code>。这里使用vi来编辑文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vi</span> ~/.ssh/authorized_keys <span class="token comment"># 将本地公钥内容添加到文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后通过将其粘贴到编辑器中输入您本地电脑的公钥（它应该在剪贴板中），并通过命令修改权限。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chmod</span> <span class="token number">600</span> ~/.ssh/authorized_keys
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在可以使用私钥作为身份验证，本地以SSH身份登录您的新用户并能通过<code>sudo su -</code>切换到<code>root</code>用户。</p><h2 id="配置ssh守护进程" tabindex="-1"><a class="header-anchor" href="#配置ssh守护进程" aria-hidden="true">#</a> 配置SSH守护进程</h2><h3 id="禁止root用户登录" tabindex="-1"><a class="header-anchor" href="#禁止root用户登录" aria-hidden="true">#</a> 禁止root用户登录</h3><p>通过修改服务器的 SSH 守护程序配置来禁止远程SSH访问 <code>root</code> 帐户，这样可以保护服务器</p><p>使用下面的命令直接修改：</p><ul><li><code>PermitRootLogin</code> 设置为 <code>no</code> 禁止通过 root 用户直接登录</li><li><code>PasswordAuthentication</code> 设置为 <code>yes</code> 允许使用密码方式登录</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/PermitRootLogin yes/PermitRootLogin no/g&#39;</span> /etc/ssh/sshd_config <span class="token comment"># 禁用服务器root远程登录</span>
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/PasswordAuthentication no/PasswordAuthentication yes/g&#39;</span> /etc/ssh/sshd_config <span class="token comment"># 允许使用正确的用户密码登录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，选择禁用 <code>root</code> 用户登录。这通常是更安全的设置，因为现在可以通过普通用户帐户访问我们的服务器，并在必要时提升权限。</p><p>通过设置上面的密钥对的方式授权也可以将用户密码登录关闭，仅通过公钥授权的方式登录。</p><h3 id="重新加载ssh" tabindex="-1"><a class="header-anchor" href="#重新加载ssh" aria-hidden="true">#</a> 重新加载SSH</h3><blockquote><p><strong>注意：</strong> 在重载之前请保证有一个活动的SSH连接，直到完全<strong>测试</strong>确认可以成功建立新的连接。否则如果后期由于错误的SSH配置导致的无法登录，那便无法登录了，只能联系服务器提供商重置服务器密码。</p></blockquote><p>要对ssh配置进行重载可以输入下面的命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl reload sshd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h3><p>打开一个新的终端窗口。在新窗口中，需要开始一个到服务器的新连接。这一次，我们不使用<code>root</code>帐户，而是使用创建的新用户<code>demo</code>。对于我们上面配置的服务器，使用此命令进行连接。在适当的地方替换您自己的信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> demo@SERVER_IP_ADDRESS
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>系统将提示输入配置的新用户的密码。之后将使用新用户的身份登录。</p><p>请记住，如果需要以<code>root</code>权限运行命令，请在它之前加上 <code>sudo</code>。</p><p>如果一切正常，您可以输入<code>exit</code>命令退出会话。</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,73),h={href:"https://ovwane.github.io/2017/11/17/CentOS7%20%E6%96%B0%E8%A3%85%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/#%E8%AE%BE%E7%BD%AE%E4%B8%BB%E6%9C%BA%E5%90%8D",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-centos-7",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.digitalocean.com/community/tutorials/how-to-configure-ssh-key-based-authentication-on-a-linux-server",target:"_blank",rel:"noopener noreferrer"};function b(g,k){const n=o("ExternalLinkIcon");return d(),c("div",null,[r,e("blockquote",null,[e("p",null,[s("相关操作和更多其他操作系统镜像操作"),e("a",p,[s("查看这里"),a(n)]),s("。")])]),u,e("ul",null,[e("li",null,[e("p",null,[e("a",h,[s("CentOS7 新装服务器初始化配置"),a(n)])])]),e("li",null,[e("p",null,[e("a",v,[s("Initial Server Setup with CentOS 7"),a(n)])])]),e("li",null,[e("p",null,[e("a",m,[s("How To Configure SSH Key-Based Authentication on a Linux Server"),a(n)])])])])])}const _=t(l,[["render",b],["__file","centos-7-server-initialization.html.vue"]]);export{_ as default};
