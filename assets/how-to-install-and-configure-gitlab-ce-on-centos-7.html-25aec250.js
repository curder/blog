import{_ as l,M as t,p as d,q as r,R as a,t as e,N as n,a1 as i}from"./framework-fb0bc66b.js";const c="/blog/assets/change-gitlab-root-password-5527e95c.png",p="/blog/assets/change-user-profile-email-address-f0bef756.png",o="/blog/assets/change-user-profile-username-3718d87a.png",u="/blog/assets/add-ssh-key-to-gitlab-ee863065.png",b="/blog/assets/gitlab-application-setting-list-56081417.png",h="/blog/assets/gitlab-application-account-and-sign-up-setting-e812b18d.png",m="/blog/assets/gitlab-create-new-project-0c8afc28.png",v="/blog/assets/gitlab-create-a-repository-85efa3f3.png",g={},f=i(`<h1 id="如何在centos-7上安装和配置gitlab-ce" tabindex="-1"><a class="header-anchor" href="#如何在centos-7上安装和配置gitlab-ce" aria-hidden="true">#</a> 如何在CentOS 7上安装和配置GitLab CE</h1><p>GitLab是一个基于GitLab Inc.开发的Rails的开源资源库管理器。它是一个基于Web的git资源库管理器，可让您的团队在编码，测试和部署应用程序方面进行协作。GitLab提供了多种功能，包括维基，问题跟踪，代码评论和活动提要。</p><h3 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤" aria-hidden="true">#</a> 步骤</h3><ul><li>配置服务器yum镜像（可选）</li><li>安装软件包</li><li>安装GitLab</li><li>配置GitLab URL</li><li>生成SSL让我们加密和DHPARAM证书</li><li>为GitLab启用Nginx HTTPS</li><li>配置firewalld</li><li>执行GitLab安装</li><li>测试</li></ul><h3 id="先决条件" tabindex="-1"><a class="header-anchor" href="#先决条件" aria-hidden="true">#</a> 先决条件</h3><ul><li>CentOS 7服务器 - 64位（CentOS 7.4 - 64位）</li><li>服务器RAM &gt;= 4GB（RAM = 4GB）</li><li>服务器的ROOT特权（YES）</li><li>一个指向服务器的域名（gitlab.webfsd.com）</li></ul><h2 id="配置yum镜像" tabindex="-1"><a class="header-anchor" href="#配置yum镜像" aria-hidden="true">#</a> 配置yum镜像</h2><ol><li>备份</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>下载</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> <span class="token parameter variable">-O</span> /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
<span class="token comment"># 或者</span>
<span class="token function">curl</span> <span class="token parameter variable">-o</span> /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>生成缓存</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum makecache
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,13),k={href:"https://opsx.alibaba.com/mirror",target:"_blank",rel:"noopener noreferrer"},x=i(`<h2 id="安装软件包" tabindex="-1"><a class="header-anchor" href="#安装软件包" aria-hidden="true">#</a> 安装软件包</h2><p>在这一步中，我们将下载/安装GitLab安装所需的一些软件包。我们将使用curl下载版本库安装程序，SELinux管理器的policycoreutils，OpenSSH和postfix作为本地SMTP服务器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">curl</span> policycoreutils openssh-server openssh-client postfix
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>之后，启动ssh和postfix服务。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl start sshd
systemctl <span class="token builtin class-name">enable</span> sshd

systemctl start postfix
systemctl <span class="token builtin class-name">enable</span> postfix
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过上次的操作，所有GitLab安装所需的软件包现在都安装在服务器上</p><h2 id="安装gitlab" tabindex="-1"><a class="header-anchor" href="#安装gitlab" aria-hidden="true">#</a> 安装GitLab</h2><p>GitLab提供了一个用于添加GitLab CE仓库的安装程序。使用curl下载安装程序并运行脚本（如下所示）以添加新的GitLab CE仓库。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-sS</span> https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>经过上面的命令，GitLab CE仓库已添加到系统中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gitlab-ce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>至此，GitLab CE现已安装在CentOS 7服务器上。</p><h2 id="配置gitlab-url" tabindex="-1"><a class="header-anchor" href="#配置gitlab-url" aria-hidden="true">#</a> 配置GitLab URL</h2><p>这里使用GitLab的域名是<code>gitlab.webfsd.com</code>，进入GitLab配置目录<code>/etc/gitlab</code>，然后用vi编辑器编辑配置文件<code>gitlab.rb</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /etc/gitlab/
<span class="token function">vi</span> gitlab.rb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用域名<code>gitlab.webfsd.com</code>，更改<code>external_url</code>行。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>external_url &#39;http://gitlab.webfsd.com&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="生成ssl让我们加密和dhparam证书" tabindex="-1"><a class="header-anchor" href="#生成ssl让我们加密和dhparam证书" aria-hidden="true">#</a> 生成SSL让我们加密和DHPARAM证书</h2><p>对于基本的安全层，我们将为我们的GitLab站点使用SSL。我们将使用来自Letsencrypt的免费SSL证书，并生成DHPARAM证书以添加额外的安全层。</p><p>要生成Letsencrypt证书，我们需要安装仓库中提供的letsencrypt命令行工具。</p><p>使用下面的yum命令在CentOS 7上安装Letsencrypt工具。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> letsencrypt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完成后，使用以下命令生成新的SSL证书letsencrypt。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> letsencrypt certonly <span class="token parameter variable">--standalone</span> <span class="token parameter variable">-d</span> gitlab.webfsd.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,24),y={href:"https://github.com/certbot/certbot/issues/5104",target:"_blank",rel:"noopener noreferrer"},_=i(`<blockquote><p><strong>注意：</strong> 在生成SSL Letsencrypt时，请确保您的HTTP和HTTPS端口未被防火墙阻止。</p></blockquote><p>键入您的电子邮件地址以更新通知，然后为Letsencrypt服务条款协议输入<code>A</code>，最后输入<code>N</code>并再次按Enter键。</p><p>如果您看到如下所示的结果，则表示您的域名证书已生成，并存储在<code>/etc/letsencrypt/live</code>目录中。</p><p>接下来，在GitLab配置目录<code>/etc/gitlab/</code>下创建新的<code>ssl</code>目录。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/gitlab/ssl/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在使用OpenSSL生成DHPARAM证书pem文件，增强安全。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> openssl dhparam <span class="token parameter variable">-out</span> /etc/gitlab/ssl/dhparams.pem <span class="token number">2048</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的命令执行，需要一段漫长的等待时间。在生成DHPARAM证书后，将证书文件的权限更改为600。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">600</span> /etc/gitlab/ssl/*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>至此，已经生成了用于GitLab安装的SSL Letsencrypt和DHPARAM证书。</p><h2 id="为gitlab启用nginx-https" tabindex="-1"><a class="header-anchor" href="#为gitlab启用nginx-https" aria-hidden="true">#</a> 为GitLab启用Nginx HTTPS</h2><p>在这个阶段，我们已经有来自使用OpenSSL命令生成的Letsencrypt和DHPARAM证书的免费SSL证书文件。在这一步中，我们将为GitLab网站启用HTTPS。我们将启用HTTPS并强制HTTP连接到HTTPS。</p><p>首先，进入GitLab配置目录<code>/etc/gitlab/</code>并编辑配置文件<code>gitlab.rb</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /etc/gitlab/ <span class="token operator">&amp;&amp;</span> <span class="token function">vi</span> gitlab.rb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在<code>external_url</code>行上将HTTP更改为HTTPS。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>external_url <span class="token string">&#39;https://gitlab.webfsd.com&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后将以下配置粘贴到<code>external_url</code>行配置下。</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">nginx[&#39;redirect_http_to_https&#39;]</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span>
<span class="token key attr-name">nginx[&#39;ssl_certificate&#39;]</span> <span class="token punctuation">=</span> <span class="token value attr-value">&quot;<span class="token inner-value">/etc/letsencrypt/live/gitlab.webfsd.com/fullchain.pem</span>&quot;</span>
<span class="token key attr-name">nginx[&#39;ssl_certificate_key&#39;]</span> <span class="token punctuation">=</span> <span class="token value attr-value">&quot;<span class="token inner-value">/etc/letsencrypt/live/gitlab.webfsd.com/privkey.pem</span>&quot;</span>
<span class="token key attr-name">nginx[&#39;ssl_dhparam&#39;]</span> <span class="token punctuation">=</span> <span class="token value attr-value">&quot;<span class="token inner-value">/etc/gitlab/ssl/dhparams.pem</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存更改并退出编辑器。</p><p>最后，使用以下命令应用GitLab配置。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gitlab-ctl reconfigure
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>又是一段漫长的等待命令执行完毕。</p><h2 id="配置firewalld" tabindex="-1"><a class="header-anchor" href="#配置firewalld" aria-hidden="true">#</a> 配置Firewalld</h2><p>如果您没有该软件包，则可以使用以下命令进行安装。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> firewalld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动firewalld并使其能够在启动时使用systemctl命令自动运行，如下所示。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl start firewalld <span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> firewalld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，为我们的服务打开新的端口。我们将为我们的GitLab配置打开SSH、HTTP和HTTPS端口。运行下面的firewall-cmd命令打开端口。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>firewall-cmd <span class="token parameter variable">--permanent</span> --add-service <span class="token function">ssh</span>
firewall-cmd <span class="token parameter variable">--permanent</span> --add-service http
firewall-cmd <span class="token parameter variable">--permanent</span> --add-service https
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在重新加载防火墙并检查firewalld配置。确保列表中包含SSH，HTTP和HTTPS。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>firewall-cmd <span class="token parameter variable">--reload</span>
firewall-cmd --list-all
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，GitLab的Firewalld配置已经完成。</p><h2 id="执行安装" tabindex="-1"><a class="header-anchor" href="#执行安装" aria-hidden="true">#</a> 执行安装</h2><p>GitLab已经安装在系统中，并且在Firewalld防火墙下运行。下面我们将在服务器上安装GitLab之后进行一些快速设置。</p><h3 id="重置gitlab-root密码" tabindex="-1"><a class="header-anchor" href="#重置gitlab-root密码" aria-hidden="true">#</a> 重置GitLab root密码</h3><p>打开浏览器并输入gitlab URL <code>https://gitlab.webfsd.com</code> 。会被重定向到HTTPS连接<code>https://gitlab.webfsd.com/users/password/edit?reset_password_token=Lj4YzxTnnQvcNR89ehsY</code>。使用新的密码更改root密码，然后单击“Change your password”按钮进行确认。</p><p><img src="`+c+'" alt=""></p><p>重置密码完毕之后，可以使用默认用户“root”和刚刚重置的密码登录到GitLab仪表板。</p><h3 id="更改个人资料和用户名" tabindex="-1"><a class="header-anchor" href="#更改个人资料和用户名" aria-hidden="true">#</a> 更改个人资料和用户名</h3><p>登录到GitLab仪表板后，单击图标配置文件的右上角，然后单击“Settings”图标以设置您的配置文件。</p><p><img src="'+p+'" alt=""></p><p>接下来，转到“帐户”标签并使用您自己的用户名更改默认的根用户名，然后点击“更新用户名”按钮。</p><p><img src="'+o+`" alt=""></p><h3 id="添加ssh密钥" tabindex="-1"><a class="header-anchor" href="#添加ssh密钥" aria-hidden="true">#</a> 添加SSH密钥</h3><p>确保当前的本地开发环境的操作系统已经存在一个密钥，如果你没有SSH密钥，你可以使用下面的命令生成一个密钥。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-keygen
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一路回车之后，将在<code>~/.ssh/</code>目录中得到两个文件。<code>id_rsa</code>是私钥，<code>id_rsa.pub</code>是公钥。</p><p>接下来，回到Web浏览器，然后点击SSH Key<code>https://gitlab.webfsd.com/profile/keys</code>标签。复制<code>~/.ssh/id_rsa.pub</code>文件的内容并粘贴到密钥框（如果当前是mac系统可以使用命令<code>pbcopy &lt; ~/.ssh/id_rsa.pub</code> 拷贝文件内容），然后单击&#39;Add Key&#39;。</p><p><img src="`+u+'" alt=""></p><p>至此，SSH密钥已更新。</p><h3 id="注册限制和限制设置" tabindex="-1"><a class="header-anchor" href="#注册限制和限制设置" aria-hidden="true">#</a> 注册限制和限制设置</h3><p>点击“管理区域”图标，然后点击齿轮图标并选择“设置”。</p><p><img src="'+b+'" alt=""></p><p>在“帐户和限制设置”部分中，您可以为每个用户配置<code>https://gitlab.webfsd.com/admin/application_settings</code>最大项目。在“注册限制”部分，您可以将电子邮件的域名添加到白名单框中。</p><p><img src="'+h+'" alt=""></p><p>完成这一切后，滚动到底部并点击&#39;Save changes&#39;按钮保存。</p><p>至此，基本的GitLab配置已经完成。</p><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2><p>单击右上角的加号图标以创建新的项目存储库。</p><p><img src="'+m+'" alt=""></p><p>输入项目名称，说明和设置项目的可视化设置。然后点击“Create project”按钮。</p><p><img src="'+v+`" alt=""></p><p>至此，该项目仓库已经创建。</p><h3 id="测试第一次提交" tabindex="-1"><a class="header-anchor" href="#测试第一次提交" aria-hidden="true">#</a> 测试第一次提交</h3><p>在您的项目创建完成后（我们的例子中是<code>hello-gitlab</code>），您将被重定向到项目页面。现在开始向仓库添加新内容。</p><p>确保您的计算机上安装了Git。</p><p>对于此测试，我们需要在计算机上设置Git帐户，您可以使用以下命令执行此操作：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;curder&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;curder@example.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>克隆存储库并添加一个新的<code>README.md</code>文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone git@gitlab.webfsd.com:root/hello-gitlab.git
<span class="token builtin class-name">cd</span> hello-gitlab/
<span class="token builtin class-name">echo</span> <span class="token string">&quot;## Hello GitLab <span class="token entity" title="\\n">\\n</span><span class="token entity" title="\\n">\\n</span>This is my first gitlab repository for my test.&quot;</span> <span class="token operator">&gt;</span> README.md

<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;Add README.md file by curder&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，将存储库推送到GitLab服务器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>回到gitlab的web界面可以看到<code>hello-gitlab</code>仓库里有我们刚刚提交的README.md文件和内容。</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,74),L={href:"https://www.howtoforge.com/tutorial/how-to-install-and-configure-gitlab-ce-on-centos-7/",target:"_blank",rel:"noopener noreferrer"};function S(w,G){const s=t("ExternalLinkIcon");return d(),r("div",null,[f,a("p",null,[e("更多的阿里云镜像"),a("a",k,[e("查看这里"),n(s)]),e("。")]),x,a("p",null,[e("如果提示python的库错误，请参考"),a("a",y,[e("GitHub上的这个issue讨论"),n(s)]),e("进行修复")]),_,a("ul",null,[a("li",null,[a("a",L,[e("如何在CentOS 7上安装和配置GitLab CE"),n(s)])])])])}const H=l(g,[["render",S],["__file","how-to-install-and-configure-gitlab-ce-on-centos-7.html.vue"]]);export{H as default};
