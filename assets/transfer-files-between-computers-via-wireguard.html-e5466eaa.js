import{_ as n,M as r,p as t,q as c,R as e,t as a,N as d,a1 as i}from"./framework-ff09ffed.js";const o="/blog/assets/wush-server-command-preview-7c8206ac.png",l="/blog/assets/wush-ssh-command-preview-137819f2.png",h="/blog/assets/wush-rsync-command-preview-951478b7.png",p="/blog/assets/wush-cp-command-preview-c820d512.png",u={},m=e("h1",{id:"通过-wireguard-在计算机之间传输文件-wush",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#通过-wireguard-在计算机之间传输文件-wush","aria-hidden":"true"},"#"),a(" 通过 wireguard 在计算机之间传输文件 wush")],-1),g={href:"https://github.com/coder/wush",target:"_blank",rel:"noopener noreferrer"},v=i(`<p>它有如下特点：</p><ol><li>无需设置或信任中继服务器进行身份验证。</li><li>由 WireGuard 提供支持，实现安全、快速、可靠的连接。</li><li>通过 UDP 实现自动点对点连接。</li><li><code>cp</code>、<code>rsync</code>、<code>ssh</code>的支持。</li></ol><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/coder/wush/main/install.sh <span class="token operator">|</span> <span class="token function">sh</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h2><h3 id="服务端" tabindex="-1"><a class="header-anchor" href="#服务端" aria-hidden="true">#</a> 服务端</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>wush serve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面是运行命令后得到的输出，当客户端需要连接服务端时，可通过 <code>&lt;auth-key&gt;</code> 连接。</p><p><img src="`+o+`" alt=""></p><h3 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端" aria-hidden="true">#</a> 客户端</h3><h4 id="连接服务端-ssh" tabindex="-1"><a class="header-anchor" href="#连接服务端-ssh" aria-hidden="true">#</a> 连接服务端 ssh</h4><p>连接时使用的auth-key是服务端运行 <code>wush serve</code> 命令后得到的输出中的 <code>&lt;auth-key&gt;</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>wush <span class="token function">ssh</span> --auth-key <span class="token operator">&lt;</span>auth-key<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+l+`" alt=""></p><h4 id="同步文件-rsync" tabindex="-1"><a class="header-anchor" href="#同步文件-rsync" aria-hidden="true">#</a> 同步文件 rsync</h4><p>将文件或目录同步到目标地址。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>wush <span class="token function">rsync</span> local-file.txt :/path/to/remote/file --auth-key <span class="token operator">&lt;</span>auth-key<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+h+`" alt=""></p><h4 id="拷贝文件-cp" tabindex="-1"><a class="header-anchor" href="#拷贝文件-cp" aria-hidden="true">#</a> 拷贝文件 cp</h4><p>连接时使用的auth-key是服务端运行 <code>wush serve</code> 命令后得到的输出中的 <code>&lt;auth-key&gt;</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>wush <span class="token function">cp</span> local-file.txt --auth-key <span class="token operator">&lt;</span>auth-key<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+p+'" alt=""></p><p>值得注意的是，拷贝到服务端的目标地址为 <code>wush serve</code> 启动时的路径。</p>',23);function b(f,k){const s=r("ExternalLinkIcon");return t(),c("div",null,[m,e("p",null,[e("a",g,[a("wush"),d(s)]),a(" 是一个命令行工具，用于点对点连接轻松传输文件和打开 shell。")]),v])}const w=n(u,[["render",b],["__file","transfer-files-between-computers-via-wireguard.html.vue"]]);export{w as default};
