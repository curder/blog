import{_ as o,M as c,p as l,q as i,R as s,t as a,N as e,a1 as t}from"./framework-fb0bc66b.js";const p="/blog/assets/api-tokens-f038e74e.png",r="/blog/assets/edit-zone-dns-use-template-d371e33e.png",d="/blog/assets/config-token-options-c70cf3ae.png",u="/blog/assets/continue-to-summary-9bbd45e8.png",m="/blog/assets/create-token-b967f274.png",h="/blog/assets/copy-api-token-c830bb0d.png",k="/blog/assets/select-need-apply-ssl-domain-0055164e.png",b="/blog/assets/get-zone-id-and-account-id-ef3aa839.png",v={},g=t('<h1 id="申请let-s-encrypt通配符https证书" tabindex="-1"><a class="header-anchor" href="#申请let-s-encrypt通配符https证书" aria-hidden="true">#</a> 申请Let&#39;s Encrypt通配符HTTPS证书</h1><p>通配符证书是一个SSL证书，可用于为给定域上的所有子域提供https，例如，<code>*.&lt;domain&gt;.com</code> 意味着任何子域名（如<code>www.example.com</code>或<code>links.example.com</code>）会使用相同的SSL证书。</p><p>使用通配符证书对于允许用户选择子域的应用程序非常有用，例如，<code>wordpress.com</code>子域下的所有博客。</p>',3),x={href:"https://github.com/Neilpang/acme.sh",target:"_blank",rel:"noopener noreferrer"},_=s("code",null,"acme",-1),f=t(`<p>主要步骤:</p><ol start="0"><li>安装依赖</li><li>安装 <code>acme.sh</code></li><li>生成证书</li><li>拷贝安装证书到 <code>nginx/apache</code> 或者其他web服务器</li><li>更新证书</li><li>更新 acme.sh</li><li>更改web服务器启用https</li></ol><blockquote><p>记得在操作具体的命令之前将一些域名变量<code>&lt;domain&gt;.com</code>替换成你当前要操作的域名信息。</p></blockquote><h2 id="安装依赖程序" tabindex="-1"><a class="header-anchor" href="#安装依赖程序" aria-hidden="true">#</a> 安装依赖程序</h2><ul><li><p><code>Debian/Ubuntu</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">curl</span> <span class="token parameter variable">-y</span> <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">cron</span> <span class="token parameter variable">-y</span> <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> socat <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>Centos</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token function">curl</span> <span class="token parameter variable">-y</span> <span class="token operator">&amp;&amp;</span> yum <span class="token function">install</span> <span class="token function">cron</span> <span class="token parameter variable">-y</span> <span class="token operator">&amp;&amp;</span> yum <span class="token function">install</span> socat <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="安装acme-sh" tabindex="-1"><a class="header-anchor" href="#安装acme-sh" aria-hidden="true">#</a> 安装<code>acme.sh</code></h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> https://get.acme.sh <span class="token operator">|</span> <span class="token function">sh</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><details class="custom-container details"><summary>输出如下内容</summary><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> https://get.acme.sh <span class="token operator">|</span> <span class="token function">sh</span>
% Total % Received % Xferd Average Speed Time Time Time Current
Dload Upload Total Spent Left Speed
<span class="token number">100</span> <span class="token number">705</span> <span class="token number">100</span> <span class="token number">705</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">2426</span> <span class="token number">0</span> --:--:-- --:--:-- --:--:-- <span class="token number">2422</span>
% Total % Received % Xferd Average Speed Time Time Time Current
Dload Upload Total Spent Left Speed
<span class="token number">100</span> 163k <span class="token number">100</span> 163k <span class="token number">0</span> <span class="token number">0</span> 400k <span class="token number">0</span> --:--:-- --:--:-- --:--:-- 401k
<span class="token punctuation">[</span>Sun Mar <span class="token number">18</span> <span class="token number">20</span>:11:01 CST <span class="token number">2018</span><span class="token punctuation">]</span> Installing from online archive.
<span class="token punctuation">[</span>Sun Mar <span class="token number">18</span> <span class="token number">20</span>:11:01 CST <span class="token number">2018</span><span class="token punctuation">]</span> Downloading https://github.com/Neilpang/acme.sh/archive/master.tar.gz
<span class="token punctuation">[</span>Sun Mar <span class="token number">18</span> <span class="token number">20</span>:11:03 CST <span class="token number">2018</span><span class="token punctuation">]</span> Extracting master.tar.gz
<span class="token punctuation">[</span>Sun Mar <span class="token number">18</span> <span class="token number">20</span>:11:03 CST <span class="token number">2018</span><span class="token punctuation">]</span> It is recommended to <span class="token function">install</span> socat first.
<span class="token punctuation">[</span>Sun Mar <span class="token number">18</span> <span class="token number">20</span>:11:03 CST <span class="token number">2018</span><span class="token punctuation">]</span> We use socat <span class="token keyword">for</span> standalone server <span class="token keyword">if</span> you use standalone mode.
<span class="token punctuation">[</span>Sun Mar <span class="token number">18</span> <span class="token number">20</span>:11:03 CST <span class="token number">2018</span><span class="token punctuation">]</span> If you don<span class="token string">&#39;t use standalone mode, just ignore this warning.
[Sun Mar 18 20:11:03 CST 2018] Installing to /root/.acme.sh
[Sun Mar 18 20:11:03 CST 2018] Installed to /root/.acme.sh/acme.sh
[Sun Mar 18 20:11:03 CST 2018] Installing alias to &#39;</span>/root/.bashrc<span class="token string">&#39;
[Sun Mar 18 20:11:03 CST 2018] OK, Close and reopen your terminal to start using acme.sh
[Sun Mar 18 20:11:03 CST 2018] Installing alias to &#39;</span>/root/.cshrc<span class="token string">&#39;
[Sun Mar 18 20:11:03 CST 2018] Installing alias to &#39;</span>/root/.tcshrc&#39;
<span class="token punctuation">[</span>Sun Mar <span class="token number">18</span> <span class="token number">20</span>:11:03 CST <span class="token number">2018</span><span class="token punctuation">]</span> Installing <span class="token function">cron</span> job
<span class="token punctuation">[</span>Sun Mar <span class="token number">18</span> <span class="token number">20</span>:11:03 CST <span class="token number">2018</span><span class="token punctuation">]</span> Good, <span class="token function">bash</span> is found, so change the shebang to use <span class="token function">bash</span> as preferred.
<span class="token punctuation">[</span>Sun Mar <span class="token number">18</span> <span class="token number">20</span>:11:03 CST <span class="token number">2018</span><span class="token punctuation">]</span> OK
<span class="token punctuation">[</span>Sun Mar <span class="token number">18</span> <span class="token number">20</span>:11:03 CST <span class="token number">2018</span><span class="token punctuation">]</span> Install success<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><blockquote><p>脚本会自动为当前用户创建定时任务, 每天凌晨自动检测所有的证书。<strong>如果快过期了, 需要更新, 则会自动更新证书。</strong></p></blockquote><p><strong>安装过程不会污染已有的系统任何功能和文件</strong>, 所有的修改都限制在安装目录中: <code>~/.acme.sh/</code></p><h2 id="生成证书" tabindex="-1"><a class="header-anchor" href="#生成证书" aria-hidden="true">#</a> 生成证书</h2><p><code>acme.sh</code> 实现了 <strong>acme</strong> 协议支持的所有验证协议. 一般有两种方式验证: <code>http</code> 和 <code>dns</code> 验证.</p><h3 id="http-验证" tabindex="-1"><a class="header-anchor" href="#http-验证" aria-hidden="true">#</a> http 验证</h3><h4 id="通用方式" tabindex="-1"><a class="header-anchor" href="#通用方式" aria-hidden="true">#</a> 通用方式</h4><p><code>http</code> 方式需要在你的网站根目录下放置一个文件, 来验证你的域名所有权,完成验证. 然后就可以生成证书了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>~/.acme.sh/acme.sh <span class="token parameter variable">--issue</span> <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>domain<span class="token operator">&gt;</span>.com <span class="token parameter variable">-d</span> www.<span class="token operator">&lt;</span>domain<span class="token operator">&gt;</span>.com <span class="token parameter variable">--webroot</span> /home/wwwroot/<span class="token operator">&lt;</span>domain<span class="token operator">&gt;</span>.com/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>只需要指定域名, 并指定域名所在的网站根目录。 <code>acme.sh</code> 会全自动的生成验证文件, 并放到网站的根目录。然后自动完成验证，最后会聪明的删除验证文件，整个过程没有任何副作用。</p><h4 id="nginx" tabindex="-1"><a class="header-anchor" href="#nginx" aria-hidden="true">#</a> Nginx</h4><p>如果当前使用的是<code>nginx</code>服务器或者反代, <code>acme.sh</code> 还可以智能的从 <code>nginx</code>的配置中自动完成验证, 将不需要指定网站根目录:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>~/.acme.sh/acme.sh <span class="token parameter variable">--issue</span> <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>domain<span class="token operator">&gt;</span>.com <span class="token parameter variable">--nginx</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="apache" tabindex="-1"><a class="header-anchor" href="#apache" aria-hidden="true">#</a> Apache</h4><p>如果你用的 <code>apache</code>服务器, <code>acme.sh</code> 还可以智能的从 <code>apache</code>的配置中自动完成验证, 你不需要指定网站根目录:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>~/.acme.sh/acme.sh <span class="token parameter variable">--issue</span> <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>domain<span class="token operator">&gt;</span>.com <span class="token parameter variable">--apache</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意：无论是 <code>apache</code> 还是 <code>nginx</code> 模式, <code>acme.sh</code>在完成验证之后, 会恢复到之前的状态, 都不会私自更改你本身的配置. 好处是你不用担心配置被搞坏, 也有一个缺点, 你需要自己配置 <code>ssl</code> 的配置, 否则只能成功生成证书, 你的网站还是无法访问<code>https</code>。</p></blockquote><h4 id="standalone" tabindex="-1"><a class="header-anchor" href="#standalone" aria-hidden="true">#</a> standalone</h4><p>如果你还没有运行任何 web 服务, 80 端口是空闲的, 那么 acme.sh 还能假装自己是一个webserver, 临时听在80 端口, 完成验证:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>~/.acme.sh/acme.sh <span class="token parameter variable">--issue</span> <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>domain<span class="token operator">&gt;</span>.com <span class="token parameter variable">--standalone</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>以上命令都将ssl相关数据写入到文件地址<code>~/USER/.acme.sh/&lt;domain&gt;.com/</code>下，包含<code>ca.cer</code>、<code>&lt;domain&gt;.com.conf</code>、<code>&lt;domain&gt;.com.key</code>、<code>fullchain.cer</code>、<code>&lt;domain&gt;.com.csr</code><br> 、<code>&lt;domain&gt;.com.cer</code>和<code>&lt;domain&gt;.com.csr.conf</code>。</p></blockquote><h3 id="dns验证" tabindex="-1"><a class="header-anchor" href="#dns验证" aria-hidden="true">#</a> DNS验证</h3><p><code>dns</code> 方式, 在域名上添加一条 <code>txt</code> 解析记录, 验证域名所有权。</p><h4 id="阿里云-dns" tabindex="-1"><a class="header-anchor" href="#阿里云-dns" aria-hidden="true">#</a> 阿里云 DNS</h4>`,31),S={href:"https://ak-console.aliyun.com/#/accesskey",target:"_blank",rel:"noopener noreferrer"},y=s("br",null,null,-1),T=s("code",null,'Ali_Key=""',-1),w=s("strong",null,"Access Key ID",-1),C=s("code",null,'Ali_Secret=""',-1),q=s("strong",null,"Access Key Secret",-1),I=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">Ali_Key</span><span class="token operator">=</span><span class="token string">&quot;soamdagfqweaf&quot;</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">Ali_Secret</span><span class="token operator">=</span><span class="token string">&quot;asd213dfas&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来再输入下面命令申请<code>Let’s Encrypt</code>泛域名免费SSL证书。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>~/.acme.sh/acme.sh <span class="token parameter variable">--issue</span> <span class="token parameter variable">--dns</span> dns_ali <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>domain<span class="token operator">&gt;</span>.com <span class="token parameter variable">-d</span> <span class="token string">&quot;*.&lt;domain&gt;.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第一次成功之后，<code>acme.sh</code>会记录下<code>App_Key</code>和<code>App_Secret</code> ，并且生成一个定时任务，每天凌晨0：00自动检测过期域名并且自动续期。对这种方式有顾虑的，请慎重，不过也可以自行删掉用户级的定时任务，并且清理掉<code>~/.acme.sh</code>文件夹就行。</p><h4 id="cloudflare-dns" tabindex="-1"><a class="header-anchor" href="#cloudflare-dns" aria-hidden="true">#</a> CloudFlare DNS</h4><p>CloudFlare的SSL证书申请需要 <code>CF_Token</code>、<code>CF_Account_ID</code> 和<code>CF_Zone_ID</code>，下面通过步骤一步一步演示这些数据的来源。</p>`,6),A={href:"https://dash.cloudflare.com/profile/api-tokens",target:"_blank",rel:"noopener noreferrer"},L=s("img",{src:p,alt:""},null,-1),N=s("li",null,[s("p",null,[a("如下图所示在『Edit zone DNS（编辑区域DNS）』点选『Use template（使用模版）』來产生一個Token。 "),s("img",{src:r,alt:""})])],-1),D=s("li",null,[s("p",null,[a("如下图所示可以为这个 Token 命名一个辨识度高的名称，然后 Permissions（权限）区块，分别新增两个『Zone（区域）』，一個 Zone 选『Zone（区域）』仅允许『Read（读）』权限，另一个 Zone 选『DNS』仅允许『Edit（编辑）』权限；在 Zone Resources（区域资源）区块，新增一个『Include（包含）』，然后选择特定的 Zone『Specific zone（特定区域）』，最后就选择要申請SSL证书的域名。权限设定完成之后就点选『Continue to summary（继续至摘要）』。 "),s("img",{src:d,alt:""}),s("img",{src:u,alt:""})])],-1),M=s("li",null,[s("p",null,"如下图所示可以再次确定你本次产生 API Token 的服务和权限是否正确，没有问题之后点击『Create Token（建立Token）』。")],-1),E=s("p",null,[s("img",{src:m,alt:""})],-1),P=s("ol",{start:"5"},[s("li",null,[a("可以看到已经生成了一组 API Token，"),s("strong",null,"请注意此API密钥仅仅会显示一次"),a("，如果后面没有的話，那仅能在 API Tokens 列表中点选需要重新产生的Token，及点选『Roll（翻新）』重新产生新的API密钥。如下图所示点击『Copy』按鈕將此API 密钥记录到需要使用的地方。")])],-1),F=s("p",null,[s("img",{src:h,alt:""})],-1),Z={start:"6"},K={href:"https://dash.cloudflare.com",target:"_blank",rel:"noopener noreferrer"},z=t('<p><img src="'+k+'" alt=""></p><ol start="7"><li>如下图所示在域名『Overview（概览）』介面，鼠标滑动到最下面，可以在右侧看到API区域，在API区域中可以看到『Zone ID（区域识别码）』和『Account ID（账户识别码）』，分別点击『Click to copy（按一下即可复制）』。</li></ol><p><img src="'+b+`" alt=""></p><ol start="8"><li>参考 acme.sh 提供的 dnsapi 文档的格式，在CLI上分别输入 API 密钥，比如以Cloudflare的DNS來說，就将刚刚上面取得的密钥分別填在对应的『CF_Token』、『CF_Account_ID』和『CF_Zone_ID』，就可以來申請SLL证书了。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">CF_Token</span><span class="token operator">=</span><span class="token string">&quot;Orxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">CF_Zone_ID</span><span class="token operator">=</span><span class="token string">&quot;94xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">CF_Account_ID</span><span class="token operator">=</span><span class="token string">&quot;f9xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span>

~/.acme.sh/acme.sh <span class="token parameter variable">--issue</span> <span class="token parameter variable">--dns</span> dns_cf <span class="token parameter variable">-d</span> <span class="token string">&quot;curder.com&quot;</span> <span class="token parameter variable">-d</span> <span class="token string">&quot;*.curder.com&quot;</span> <span class="token punctuation">\\</span>
--key-file       /etc/nginx/ssl/curder.com/privkey.pem  <span class="token punctuation">\\</span>
--fullchain-file /etc/nginx/ssl/curder.com/fullchain.pem <span class="token punctuation">\\</span>
<span class="token parameter variable">--reloadcmd</span>      <span class="token string">&quot;systemctl force-reload openresty.service&quot;</span>
<span class="token comment"># --reloadcmd      &quot;service nginx force-reload&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="拷贝安装证书" tabindex="-1"><a class="header-anchor" href="#拷贝安装证书" aria-hidden="true">#</a> 拷贝安装证书</h2><p>前面证书生成以后, 接下来需要使用命令把证书拷贝到真正需要用它的地方。</p><p>**注意, **默认生成的证书都放在安装目录下: <code>~/.acme.sh/</code>，不要直接使用此目录下的文件。例如: 不要直接让 <code>nginx/apache</code> 的配置文件使用这下面的文件. 这里面的文件都是内部使用, 而且目录结构可能会变化.</p><p>正确的使用方法是使用 <code>--installcert</code> 命令,并指定目标位置, 然后证书文件会被copy到相应的位置，如果 <code>/etc/nginx/ssl</code> 不存在需要使用<code>mkdir</code> 命令创建<code>mkdir -p /etc/nginx/ssl</code>， 例如:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>~/.acme.sh/acme.sh <span class="token parameter variable">--installcert</span> <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>domain<span class="token operator">&gt;</span>.com <span class="token punctuation">\\</span>
--key-file /etc/nginx/ssl/<span class="token operator">&lt;</span>domain<span class="token operator">&gt;</span>.com.key <span class="token punctuation">\\</span>
--fullchain-file /etc/nginx/ssl/fullchain.cer <span class="token punctuation">\\</span>
<span class="token parameter variable">--reloadcmd</span> <span class="token string">&quot;service nginx force-reload&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nginx 的配置 <code>ssl_certificate</code> 使用 <code>/etc/nginx/ssl/fullchain.cer</code> ，而非 <code>/etc/nginx/ssl/&lt;domain&gt;.cer</code> ，否则 SSL Labs 的测试会报 Chain issues Incomplete 错误。</p><p><code>--installcert</code> 命令可以携带很多参数, 来指定目标文件. 并且可以指定 <code>reloadcmd</code>, 当证书更新以后, <code>reloadcmd</code>会被自动调用,让服务器生效.</p>`,12),R={href:"https://github.com/Neilpang/acme.sh#3-install-the-issued-cert-to-apachenginx-etc",target:"_blank",rel:"noopener noreferrer"},U=t(`<p>值得注意的是, 这里指定的所有参数都会被自动记录下来, 并在将来证书自动更新以后, 被再次自动调用。</p><h2 id="更新证书" tabindex="-1"><a class="header-anchor" href="#更新证书" aria-hidden="true">#</a> 更新证书</h2><p>目前证书在 60 天以后会自动更新, 无需任何操作. 今后有可能会缩短这个时间, 不过都是自动的, 作为使用者不用关心。</p><h2 id="更新-acme-sh" tabindex="-1"><a class="header-anchor" href="#更新-acme-sh" aria-hidden="true">#</a> 更新 acme.sh</h2><p>目前由于 acme 协议和 letsencrypt CA 都在频繁的更新, 因此 <code>acme.sh</code> 也经常更新以保持同步</p><ul><li>升级 acme.sh 到最新版</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>acme.sh <span class="token parameter variable">--upgrade</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>如果你不想手动升级, 可以开启自动升级<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>acme.sh <span class="token parameter variable">--upgrade</span> --auto-upgrade
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>之后, acme.sh 就会自动保持更新了.</p><ul><li>你也可以随时关闭自动更新<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>acme.sh <span class="token parameter variable">--upgrade</span> --auto-upgrade <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="更改web服务器启用https" tabindex="-1"><a class="header-anchor" href="#更改web服务器启用https" aria-hidden="true">#</a> 更改web服务器启用https</h2><p>这里以Nginx应用为例：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">listen</span>      <span class="token number">80</span></span><span class="token punctuation">;</span> <span class="token comment">## listen for ipv4</span>
    <span class="token directive"><span class="token keyword">server_name</span>   &lt;domain&gt;.com</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">return</span>      <span class="token number">301</span> https://<span class="token variable">$server_name</span><span class="token variable">$request_uri</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">charset</span> utf-8</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">client_max_body_size</span> <span class="token number">128M</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">443</span></span><span class="token punctuation">;</span>

    <span class="token comment"># SSL support</span>
    <span class="token directive"><span class="token keyword">ssl</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_certificate</span>      ../ssl/fullchain.cer</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_certificate_key</span>  ../ssl/&lt;domain&gt;.com.key</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">server_name</span> &lt;domain&gt;.com</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">root</span>        /web_path/public</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">index</span>       index.php</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更改完之后重启服务器<code>sudo systemctl reload nginx</code>，访问<code>&lt;domain&gt;.com</code>即可看到效果了。</p><blockquote><p>如果你使用的是 aliyun 等云服务器，可能还需要配置云服务器的<strong>安全组配置</strong>，将 443 端口开放访问。</p></blockquote><h2 id="参考地址" tabindex="-1"><a class="header-anchor" href="#参考地址" aria-hidden="true">#</a> 参考地址</h2>`,16),B={href:"https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E",target:"_blank",rel:"noopener noreferrer"},O={href:"https://my.oschina.net/kimver/blog/1634575#comment-list",target:"_blank",rel:"noopener noreferrer"},V={href:"https://www.wn789.com/15510.html",target:"_blank",rel:"noopener noreferrer"};function H($,j){const n=c("ExternalLinkIcon");return l(),i("div",null,[g,s("p",null,[s("a",x,[a("acme.sh"),e(n)]),a(" 实现了 "),_,a(" 协议, 可以从 letsencrypt 生成免费的证书。")]),f,s("p",null,[a("通过访问地址获取："),s("a",S,[a("Ali_Key 和 Ali_Secret"),e(n)]),a("。"),y,a(" 然后输入下面命令。其中 "),T,a("中输入个人在阿里云后台的"),w,a("信息，"),C,a("输入你的"),q,a("信息。")]),I,s("ol",null,[s("li",null,[s("p",null,[a("登录到 Cloudflare 的 "),s("a",A,[a("API Tokens"),e(n)]),a(" 页面，点选如下图所示的『Create Token（建立Token）』。 "),L])]),N,D,M]),E,P,F,s("ol",Z,[s("li",null,[a("回到 "),s("a",K,[a("Cloudflare 账户首页"),e(n)]),a("的『网站』页面选择本次要申請SSL证书的域名。")])]),z,s("p",null,[a("详细参数请参考: "),s("a",R,[a("https://github.com/Neilpang/acme.sh#3-install-the-issued-cert-to-apachenginx-etc"),e(n)])]),U,s("ul",null,[s("li",null,[s("p",null,[s("a",B,[a("Neilpang/acme.sh"),e(n)])])]),s("li",null,[s("p",null,[s("a",O,[a("申请Let's Encrypt通配符HTTPS证书"),e(n)])])]),s("li",null,[s("p",null,[s("a",V,[a("使用阿里云域名API申请Let’s Encrypt泛域名免费SSL证书教程"),e(n)])])])])])}const X=o(v,[["render",H],["__file","requesting-the-lets-encrypt-wildcard-https-certificate.html.vue"]]);export{X as default};
