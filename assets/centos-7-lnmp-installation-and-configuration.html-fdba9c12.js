import{_ as l,M as r,p,q as o,R as a,t as n,N as e,a1 as i}from"./framework-96b046e1.js";const t="/blog/assets/yum-epel-repository-list-6a9c3e3d.png",c="/blog/assets/nginx-status-check-19ef8e5d.png",d="/blog/assets/php-fpm-status-check-983c6506.png",m="/blog/assets/laravel-install-preview-2af7d393.png",u={},h=i('<h1 id="centos-7-lnmp-安装和配置" tabindex="-1"><a class="header-anchor" href="#centos-7-lnmp-安装和配置" aria-hidden="true">#</a> CentOS 7 LNMP 安装和配置</h1><h2 id="软件版本" tabindex="-1"><a class="header-anchor" href="#软件版本" aria-hidden="true">#</a> 软件版本</h2><ul><li>CentOS Linux release 7.9.2009 (Core)</li><li>nginx 1.20.1</li><li>MySQL 5.7.38</li><li>php-fpm 8.1.6</li><li>Composer 1.4.2</li><li>Laravel 9.12.2</li><li>nodejs v16.15.0 &amp;&amp; npm 8.5.5 &amp;&amp; yarn 1.22.18</li></ul><h2 id="升级-epel-仓库" tabindex="-1"><a class="header-anchor" href="#升级-epel-仓库" aria-hidden="true">#</a> 升级 EPEL 仓库</h2><h3 id="升级命令" tabindex="-1"><a class="header-anchor" href="#升级命令" aria-hidden="true">#</a> 升级命令</h3><p>EPEL (Extra Packages for Enterprise Linux，企业版Linux的额外软件包) 是Fedora小组维护的一个软件仓库项目，为RHEL/CentOS提供他们默认不提供的软件包。这个源兼容RHEL及像CentOS和Scientific Linux这样的衍生版本。</p>',6),v={href:"https://fedoraproject.org/wiki/EPEL",title:"EPEL Repository",target:"_blank",rel:"noopener noreferrer"},b=i(`<p>我们需要Nginx安装的EPEL仓库，因为官方CentOS仓库中不存在Nginx软件包。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> epel-release
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行完成上面的<code>yum</code>命令安装<code>EPEL</code>仓库。</p><h3 id="检查升级结果" tabindex="-1"><a class="header-anchor" href="#检查升级结果" aria-hidden="true">#</a> 检查升级结果</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum repolist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+t+`" alt="yum epel repository list"></p><h2 id="安装nginx" tabindex="-1"><a class="header-anchor" href="#安装nginx" aria-hidden="true">#</a> 安装Nginx</h2><p>使用LNMP环境下运行Laravel。Nginx是其中的Web服务器部分，可以从EPEL仓库安装。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="启动nginx" tabindex="-1"><a class="header-anchor" href="#启动nginx" aria-hidden="true">#</a> 启动Nginx</h3><p>安装完成后，启动 Nginx 并将其添加到系统自启动。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl start nginx
<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检查nginx" tabindex="-1"><a class="header-anchor" href="#检查nginx" aria-hidden="true">#</a> 检查Nginx</h3><p>Nginx默认运行在 80 端口，使用下面的<code>netstat</code>命令检查。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">netstat</span> <span class="token parameter variable">-plntu</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">80</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+c+'" alt="Nginx status check"></p><p>至此<code>Nginx</code>安装完毕。</p><h2 id="安装php" tabindex="-1"><a class="header-anchor" href="#安装php" aria-hidden="true">#</a> 安装PHP</h2><p>在CentOS基础库中不存在PHP 8.1，我们需要从<code>remi</code>的第三方仓库中安装它。</p><blockquote><p>之所以推荐它是因为它非常方便切换PHP的版本。</p></blockquote>',20),g={href:"https://rpms.remirepo.net/",target:"_blank",rel:"noopener noreferrer"},k=i(`<h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> https://mirrors.aliyun.com/remi/enterprise/remi-release-7.rpm <span class="token comment"># 从阿里云镜像处安装remi源</span>
<span class="token function">sudo</span> yum-config-manager <span class="token parameter variable">--enable</span> remi-php81 <span class="token comment"># 默认remi仓库禁用的，实际使用时启用</span>
yum repolist all <span class="token operator">|</span> <span class="token function">grep</span> enabled <span class="token operator">|</span> <span class="token function">grep</span> php <span class="token comment"># 检查当前yum允许安装的PHP版本</span>
<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> php81 php81-php-fpm php81-php-gd php81-php-mbstring php81-php-mysqlnd php81-php-xml php81-php-opcache php81-php-pecl-zip php81-php-bcmath php81-php-sodium
<span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">which</span> php81<span class="token variable">\`</span></span> /usr/bin/php <span class="token comment"># 建立软连接方便命令行使用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行完上面的命令后，CentOS系统上已经安装了PHP 8.1, 安装好的<code>php81</code>目录在<code>/etc/opt/remi/php81</code>。</p><h3 id="安装其他版本-optional" tabindex="-1"><a class="header-anchor" href="#安装其他版本-optional" aria-hidden="true">#</a> 安装其他版本(optional)</h3><p>再安装一个PHP 7.4 版本为例，执行下面的操作即可完成PHP8.0版本的安装，文件安装在 <code>/ect/opt/remi/php74</code>目录下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum-config-manager <span class="token parameter variable">--enable</span> remi-php74
<span class="token function">sudo</span> yum <span class="token function">install</span> php74 php74-php-fpm php74-php-gd php74-php-mbstring php74-php-mysqlnd php74-php-xml php74-php-opcache php74-php-pecl-zip php74-php-bcmath php74-php-sodium
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>安装其他版本PHP的时候，需要注意修改php-fpm进程的端口。</p></blockquote><h3 id="配置php-fpm" tabindex="-1"><a class="header-anchor" href="#配置php-fpm" aria-hidden="true">#</a> 配置php-fpm</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">PHP_PATH</span><span class="token operator">=</span>/etc/opt/remi/php81 <span class="token comment"># 指定PHP版本路径</span>

<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/^;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g&#39;</span> <span class="token variable">$PHP_PATH</span>/php.ini
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/^expose_php = On/expose_php = Off/g&#39;</span> <span class="token variable">$PHP_PATH</span>/php.ini

<span class="token comment">## 替换进程执行者和执行所属主</span>
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/^user = apache/user = nginx/g&#39;</span> <span class="token variable">$PHP_PATH</span>/php-fpm.d/www.conf
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/^group = apache/group = nginx/g&#39;</span> <span class="token variable">$PHP_PATH</span>/php-fpm.d/www.conf

<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/^;listen.owner = nobody/listen.owner = nginx/g&#39;</span> <span class="token variable">$PHP_PATH</span>/php-fpm.d/www.conf
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/^;listen.group = nobody/listen.group = nginx/g&#39;</span> <span class="token variable">$PHP_PATH</span>/php-fpm.d/www.conf
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/^;listen.mode = 0660/listen.mode = 0660/g&#39;</span> <span class="token variable">$PHP_PATH</span>/php-fpm.d/www.conf

<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s#^;env#env#g&#39;</span> <span class="token variable">$PHP_PATH</span>/php-fpm.d/www.conf

<span class="token builtin class-name">unset</span> PHP_PATH
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl start php81-php-fpm.service <span class="token comment"># 启动PHP8.1</span>
<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> php81-php-fpm.service <span class="token comment"># 开机自启动PHP8.1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="检查php-fpm" tabindex="-1"><a class="header-anchor" href="#检查php-fpm" aria-hidden="true">#</a> 检查php-fpm</h2><p>检查端口是否正常打开运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">netstat</span> -tunpl<span class="token operator">|</span><span class="token function">grep</span> <span class="token number">9000</span> 
<span class="token comment"># sudo netstat -pl | grep php-fpm.sock # 或者查看socket文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+'" alt="PHP Fpm status check"></p><p>至此，php-fpm 进程已经启动。</p><h2 id="安装mysql" tabindex="-1"><a class="header-anchor" href="#安装mysql" aria-hidden="true">#</a> 安装MySQL</h2><p>可以使用MariaDB或PostgreSQL作为Laravel项目的数据库存储。</p>',17),f=a("code",null,"yum",-1),x={href:"https://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/",title:"mysql server install",target:"_blank",rel:"noopener noreferrer"},y=i(`<h3 id="下载并安装mysql5-7" tabindex="-1"><a class="header-anchor" href="#下载并安装mysql5-7" aria-hidden="true">#</a> 下载并安装MySQL5.7</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm <span class="token comment"># 安装MySQL5.7</span>
<span class="token comment"># wget https://dev.mysql.com/get/mysql80-community-release-el7-5.noarch.rpm # 安装MySQL8.0</span>
yum localinstall mysql57-community-release-el7-11.noarch.rpm <span class="token parameter variable">-y</span>
yum repolist enabled <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;mysql.-community.&quot;</span> <span class="token comment"># 检查是否安装成功</span>
<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> mysql-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>执行上面的命令进行MySQL的安装，在安装的过程中两次按<code>Y</code>键，在同意后安装完成。</p></blockquote><h3 id="启动mysql" tabindex="-1"><a class="header-anchor" href="#启动mysql" aria-hidden="true">#</a> 启动MySQL</h3><p>使用下面的命令启动<code>mysql</code>并使其随系统启动而启动。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl start mysqld
<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> mysqld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置mysql" tabindex="-1"><a class="header-anchor" href="#配置mysql" aria-hidden="true">#</a> 配置MySQL</h3><h4 id="获取安装时初始化密码" tabindex="-1"><a class="header-anchor" href="#获取安装时初始化密码" aria-hidden="true">#</a> 获取安装时初始化密码</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">grep</span> <span class="token string">&#39;temporary password&#39;</span> /var/log/mysqld.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="登录并重设root账户密码" tabindex="-1"><a class="header-anchor" href="#登录并重设root账户密码" aria-hidden="true">#</a> 登录并重设root账户密码</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> <span class="token comment"># 回车输入上面获取到的一次性密码</span>

ALTER <span class="token environment constant">USER</span> <span class="token string">&#39;root&#39;</span>@<span class="token string">&#39;localhost&#39;</span> IDENTIFIED BY <span class="token string">&#39;MyNewPassword1!&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建一个测试数据库和测试用户" tabindex="-1"><a class="header-anchor" href="#创建一个测试数据库和测试用户" aria-hidden="true">#</a> 创建一个测试数据库和测试用户</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CREATE DATABASE laravel; -- 创建一个laravel数据库
GRANT ALL PRIVILEGES ON laravel.* TO laravel@localhost IDENTIFIED BY &quot;LaravelPassword1!&quot;; -- 创建一个对应的用户
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试mysql" tabindex="-1"><a class="header-anchor" href="#测试mysql" aria-hidden="true">#</a> 测试MySQL</h3><p>MySQL已经启动并在3306端口上运行，可以使用netstat命令检查。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">netstat</span> <span class="token parameter variable">-plntu</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">3306</span> <span class="token comment"># 检查端口</span>
<span class="token function">ps</span> aux<span class="token operator">|</span><span class="token function">grep</span> mysqld <span class="token comment"># 检查进程</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，MySQL的安装和配置已经完成。</p><h2 id="安装php-composer" tabindex="-1"><a class="header-anchor" href="#安装php-composer" aria-hidden="true">#</a> 安装PHP Composer</h2><p>PHP composer是PHP语言的包管理器。 它创建于2011年，灵感来自于Node.js的“npm”和Ruby的“bundler”安装程序。 使用<code>curl</code>命令安装composer。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php <span class="token parameter variable">-r</span> <span class="token string">&quot;copy(&#39;https://install.phpcomposer.com/installer&#39;, &#39;composer-setup.php&#39;);&quot;</span>
php composer-setup.php
php <span class="token parameter variable">-r</span> <span class="token string">&quot;unlink(&#39;composer-setup.php&#39;);&quot;</span>
<span class="token function">sudo</span> <span class="token function">mv</span> composer.phar /usr/local/bin/composer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>配置Packagist国内镜像</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">composer</span> config <span class="token parameter variable">-g</span> repo.packagist <span class="token function">composer</span> https://mirrors.aliyun.com/composer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完成后，尝试使用“composer”命令，您将看到以下结果。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">composer</span> <span class="token parameter variable">-V</span> <span class="token comment"># 查看composer版本</span>
<span class="token function">composer</span> config <span class="token parameter variable">-g</span> repo.packagist <span class="token parameter variable">-l</span> <span class="token comment"># 查看配置的Packagist国内镜像</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，Composer已经正常安装在了CentOS系统上。</p><h3 id="nodejs-npm" tabindex="-1"><a class="header-anchor" href="#nodejs-npm" aria-hidden="true">#</a> NodeJS &amp;&amp; NPM</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> nodejs <span class="token function">npm</span> <span class="token parameter variable">--enablerepo</span><span class="token operator">=</span>epel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="yarn" tabindex="-1"><a class="header-anchor" href="#yarn" aria-hidden="true">#</a> Yarn</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> <span class="token function">yarn</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="安装laravel测试lnmp" tabindex="-1"><a class="header-anchor" href="#安装laravel测试lnmp" aria-hidden="true">#</a> 安装Laravel测试LNMP</h3><p>现在进入到 laravel 的根目录<code>/var/www/codes/laravel.domain.io</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /var/www/codes/laravel.domain.io <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> /var/www/codes/laravel.domain.io
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,32),P={href:"https://laravel.com/docs/5.4/installation",title:"Install Laravel Framework Document",target:"_blank",rel:"noopener noreferrer"},_=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">composer</span> create-project laravel/laravel <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>等待Laravel安装完成，这可能需要一些时间。</p><p>安装完成后，将Laravel Web服务器录的所有者更改为“nginx”用户，并使用以下命令将存储目录的权限更改为755。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chown</span> <span class="token parameter variable">-R</span> nginx:root /var/www/codes/laravel.domain.io
<span class="token function">chmod</span> <span class="token number">755</span> <span class="token parameter variable">-R</span> /var/www/codes/laravel.domain.io/storage
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，Laravel安装已经完成。</p><h3 id="为-laravel-配置nginx配置" tabindex="-1"><a class="header-anchor" href="#为-laravel-配置nginx配置" aria-hidden="true">#</a> 为 Laravel 配置Nginx配置</h3><p>在这个步骤中，将为 Laravel 项目创建 Nginx 虚拟主机配置。 我们需要为此 Laravel 定义web根目录<code>/var/www/codes/laravel.domain.io/public</code>。</p><p>接下来，<code>cd</code>到 Nginx 目录，并在<code>conf.d</code>目录中创建一个新的虚拟主机配置文件<code>laravel.domain.io.conf</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&#39;
server {
    listen 80;

    # Log files for Debugging
    access_log /var/log/nginx/laravel.domain.io-access.log;
    error_log /var/log/nginx/laravel.domain.io-error.log;

    # Webroot Directory for Laravel project
    root /var/www/codes/laravel.domain.io/public;
    index index.php index.html index.htm;

    # Your Domain Name
    server_name laravel.domain.io;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    # PHP-FPM Configuration Nginx
    location ~ \\.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\\.php)(/.+)$;
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }

    location ~ /\\.ht {
        deny all;
    }
}
&#39;</span> <span class="token operator">&gt;&gt;</span> /etc/nginx/conf.d/laravel.domain.io.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试并重启nginx" tabindex="-1"><a class="header-anchor" href="#测试并重启nginx" aria-hidden="true">#</a> 测试并重启Nginx</h3><p>测试nginx配置，确保没有错误，然后重新启动nginx服务。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nginx <span class="token parameter variable">-t</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> systemctl restart nginx <span class="token comment"># 检测配置文件，如果成功则重启Nginx</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>至此，Laravel的nginx虚拟主机配置已经完成。</p><h3 id="测试laravel" tabindex="-1"><a class="header-anchor" href="#测试laravel" aria-hidden="true">#</a> 测试Laravel</h3><p>打开浏览器并输入服务器配置的Laravel URL，在Nginx虚拟主机文件中定义了Laravel的域名。 我的是<code>laravel.domain.io</code>。</p><p>访问域名时，您将看到Laravel框架的首页。</p><p><img src="`+m+'" alt="Install laravel framework preview"></p><p>CentOS 7上的Nginx、PHP-FPM、MySQL、Composer、NodeJS、Yarn和Laravel安装已经成功。</p><h2 id="参考连接" tabindex="-1"><a class="header-anchor" href="#参考连接" aria-hidden="true">#</a> 参考连接</h2>',19),w={href:"https://www.tecmint.com/install-php-7-in-centos-7/",target:"_blank",rel:"noopener noreferrer"},L={href:"https://linuxize.com/post/install-php-7-on-centos-7/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-a-centos-7-server",target:"_blank",rel:"noopener noreferrer"},H={href:"https://www.jianshu.com/p/7d3f3fa056e8",target:"_blank",rel:"noopener noreferrer"};function N(E,S){const s=r("ExternalLinkIcon");return p(),o("div",null,[h,a("p",null,[n("更多详细介绍查看这里："),a("a",v,[n("EPEl"),e(s)])]),b,a("p",null,[n("更多仓库相关信息"),a("a",g,[n("参考这里"),e(s)]),n("。")]),k,a("p",null,[n("这里使用MySQL数据库服务器进行安装。它在CentOS存储库中可用，使用下面的"),f,n(" 命令"),a("a",x,[n("安装MySQL-server"),e(s)]),n("。")]),y,a("p",null,[n("Laravel提供了两种在服务器上"),a("a",P,[n("安装框架"),e(s)]),n(" 的方法。 通过使用composer命令创建一个新项目来安装Laravel，运行下面的命令来安装Laravel。")]),_,a("ul",null,[a("li",null,[a("p",null,[a("a",w,[n("How to Install PHP 7 in CentOS 7"),e(s)])])]),a("li",null,[a("p",null,[a("a",L,[n("Install PHP 7 on CentOS 7"),e(s)])])]),a("li",null,[a("p",null,[a("a",q,[n("How To Install Node.js on a CentOS 7 server"),e(s)])])]),a("li",null,[a("p",null,[a("a",H,[n("Centos7 安装Nodejs"),e(s)])])])])])}const M=l(u,[["render",N],["__file","centos-7-lnmp-installation-and-configuration.html.vue"]]);export{M as default};
